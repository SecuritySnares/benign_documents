%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 18 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(1) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 582.9 540 720 R
7 X
V
1 14 Q
0 X
(Domains of Concer) 166.32 710.67 T
(n in Softwar) 281.2 710.67 T
(e Ar) 354.84 710.67 T
(chitectur) 380.63 710.67 T
(es) 434.02 710.67 T
(and Ar) 184.73 693.67 T
(chitectur) 226.87 693.67 T
(e Description Languages) 280.27 693.67 T
0 12 Q
(Nenad Medvido) 198.55 668 T
(vic and Da) 276.02 668 T
(vid S. Rosenblum) 327.77 668 T
2 F
(Department of Information and Computer Science) 185.18 651 T
(Univer) 231.06 637 T
(sity of California, Irvine) 264.26 637 T
(Irvine) 214.88 623 T
(, California 92697-3425, U) 243.41 623 T
(.S.A.) 374.79 623 T
({neno,dsr}@ics.uci.edu) 249.19 609 T
1 F
(Abstract) 72 558.39 T
2 10 Q
0.08 (Softwar) 72 532.88 P
0.08 (e ar) 102.75 532.88 P
0.08 (c) 118.29 532.88 P
0.08 (hitectur) 122.58 532.88 P
0.08 (es shift the focus of de) 153.32 532.88 P
0.08 (veloper) 242.2 532.88 P
0.08 (s fr) 272.09 532.88 P
0.08 (om) 284.78 532.88 P
3.82 (lines-of-code to coar) 72 521.88 P
3.82 (ser) 162.86 521.88 P
3.82 (-gr) 174.88 521.88 P
3.82 (ained elements and their) 186.95 521.88 P
1.08 (inter) 72 510.88 P
1.08 (connection structur) 90.52 510.88 P
1.08 (e) 169.27 510.88 P
1.08 (. Ar) 173.57 510.88 P
1.08 (c) 189.27 510.88 P
1.08 (hitectur) 193.56 510.88 P
1.08 (e description lan-) 224.3 510.88 P
0.95 (gua) 72 499.88 P
0.95 (g) 86.9 499.88 P
0.95 (es \050ADLs\051 have been pr) 91.8 499.88 P
0.95 (oposed as domain-speci\336c) 189.56 499.88 P
3.83 (langua) 72 488.88 P
3.83 (g) 99.68 488.88 P
3.83 (es for the domain of softwar) 104.58 488.88 P
3.83 (e ar) 235.89 488.88 P
3.83 (c) 255.18 488.88 P
3.83 (hitectur) 259.47 488.88 P
3.83 (e) 290.21 488.88 P
3.83 (.) 294.5 488.88 P
0.44 (Ther) 72 477.88 P
0.44 (e is still little consensus in the r) 90.52 477.88 P
0.44 (esear) 219.6 477.88 P
0.44 (c) 240.89 477.88 P
0.44 (h community) 245.18 477.88 P
1.52 (on what pr) 72 466.88 P
1.52 (oblems ar) 117.93 466.88 P
1.52 (e most important to addr) 158.8 466.88 P
1.52 (ess in a) 263.96 466.88 P
0.13 (study of softwar) 72 455.88 P
0.13 (e ar) 135.79 455.88 P
0.13 (c) 151.38 455.88 P
0.13 (hitectur) 155.67 455.88 P
0.13 (e) 186.41 455.88 P
0.13 (, what aspects of an ar) 190.75 455.88 P
0.13 (c) 281.6 455.88 P
0.13 (hi-) 285.89 455.88 P
0.69 (tectur) 72 444.88 P
0.69 (e should be modeled in an ADL, or e) 94.96 444.88 P
0.69 (ven what an) 247.28 444.88 P
2.26 (ADL is. T) 72 433.88 P
2.26 (o shed light on these issues, we pr) 114.22 433.88 P
2.26 (o) 265.68 433.88 P
2.26 (vide a) 270.58 433.88 P
1.78 (fr) 72 422.88 P
1.78 (ame) 78.52 422.88 P
1.78 (work of ar) 95.03 422.88 P
1.78 (c) 139.89 422.88 P
1.78 (hitectur) 144.18 422.88 P
1.78 (al domains, or ar) 175.14 422.88 P
1.78 (eas of con-) 249.56 422.88 P
0.54 (cern in the study of softwar) 72 411.88 P
0.54 (e ar) 183.49 411.88 P
0.54 (c) 199.49 411.88 P
0.54 (hitectur) 203.77 411.88 P
0.54 (es. W) 234.51 411.88 P
0.54 (e e) 255.79 411.88 P
0.54 (valuate) 267.56 411.88 P
0.8 (e) 72 400.88 P
0.8 (xisting ADLs with r) 76.24 400.88 P
0.8 (espect to the fr) 156.35 400.88 P
0.8 (ame) 217.77 400.88 P
0.8 (work and study) 234.28 400.88 P
1.49 (the r) 72 389.88 P
1.49 (elationship between ar) 91.73 389.88 P
1.49 (c) 185.44 389.88 P
1.49 (hitectur) 189.73 389.88 P
1.49 (al and application) 220.69 389.88 P
0.14 (domains. One conclusion is that, while the ar) 72 378.88 P
0.14 (c) 253.97 378.88 P
0.14 (hitectur) 258.26 378.88 P
0.14 (al) 289.22 378.88 P
0.76 (domains per) 72 367.88 P
0.76 (spective enables one to appr) 122.39 367.88 P
0.76 (oac) 238.87 367.88 P
0.76 (h ar) 253.15 367.88 P
0.76 (c) 269.94 367.88 P
0.76 (hitec-) 274.23 367.88 P
0.75 (tur) 72 356.88 P
0.75 (es and ADLs in a ne) 83.3 356.88 P
0.75 (w) 167.72 356.88 P
0.75 (, mor) 173.65 356.88 P
0.75 (e structur) 195.14 356.88 P
0.75 (ed manner) 234.12 356.88 P
0.75 (, fur-) 276.25 356.88 P
0.19 (ther under) 72 345.88 P
0.19 (standing of ar) 114.03 345.88 P
0.19 (c) 170.16 345.88 P
0.19 (hitectur) 174.45 345.88 P
0.19 (al domains, their tie to) 205.41 345.88 P
3.01 (application domains, and their speci\336c in\337uence on) 72 334.88 P
(ADLs is needed.) 72 323.88 T
1 F
7.67 (K) 72 300.03 P
7.67 (eyw) 79.53 300.03 P
7.67 (ords) 96.09 300.03 P
2 F
7.67 ( \321 softwar) 114.98 300.03 P
7.67 (e ar) 173.85 300.03 P
7.67 (c) 196.97 300.03 P
7.67 (hitectur) 201.26 300.03 P
7.67 (e) 232 300.03 P
7.67 (, ar) 236.34 300.03 P
7.67 (c) 257.53 300.03 P
7.67 (hitectur) 261.82 300.03 P
7.67 (e) 292.56 300.03 P
4.66 (description langua) 72 289.03 P
4.66 (g) 151.84 289.03 P
4.66 (e) 156.74 289.03 P
4.66 (, domain, domain-speci\336c lan-) 161.08 289.03 P
(gua) 72 278.03 T
(g) 86.9 278.03 T
(e) 91.8 278.03 T
(, ar) 96.14 278.03 T
(c) 109.66 278.03 T
(hitectur) 113.95 278.03 T
(al domain) 144.91 278.03 T
1 12 Q
(1. Intr) 72 244.85 T
(oduction) 104.45 244.85 T
0 10 Q
0.4 (Softw) 72 219.33 P
0.4 (are architecture is an aspect of softw) 95.79 219.33 P
0.4 (are engineer-) 244.13 219.33 P
-0.06 (ing directed at reducing costs of de) 72 207.33 P
-0.06 (v) 211.38 207.33 P
-0.06 (eloping applications) 216.23 207.33 P
-0.19 (and increasing the potential for commonality among dif-) 72 195.33 P
3.24 (ferent members of a closely related product f) 72 183.33 P
3.24 (amily) 274.22 183.33 P
1.66 ([PW92, GS93]. Softw) 72 171.33 P
1.66 (are de) 163.56 171.33 P
1.66 (v) 189.12 171.33 P
1.66 (elopment based on com-) 193.97 171.33 P
3.06 (mon architectural idioms has its focus shifted from) 72 159.33 P
1.74 (lines-of-code to coarser) 72 147.33 P
1.74 (-grained architectural elements) 169.68 147.33 P
0.38 (and their o) 72 135.33 P
0.38 (v) 115.38 135.33 P
0.38 (erall interconnection structure. This enables) 120.23 135.33 P
0.46 (de) 72 123.33 P
0.46 (v) 81.19 123.33 P
0.46 (elopers to abstract a) 86.04 123.33 P
0.46 (w) 166.97 123.33 P
0.46 (ay the unnecessary details and) 174.09 123.33 P
0.85 (focus on the \322big picture:\323 system structure, high le) 72 111.33 P
0.85 (v) 284.93 111.33 P
0.85 (el) 289.78 111.33 P
0.47 (communication protocols, assignment of softw) 72 99.33 P
0.47 (are com-) 261.27 99.33 P
0.14 (ponents and connectors to hardw) 72 87.33 P
0.14 (are components, de) 204.09 87.33 P
0.14 (v) 281.6 87.33 P
0.14 (el-) 286.45 87.33 P
(opment process, and so on.) 72 75.33 T
0.25 (Man) 315 559.73 P
0.25 (y researchers ha) 333.18 559.73 P
0.25 (v) 397.88 559.73 P
0.25 (e realized that, to obtain the bene-) 402.73 559.73 P
0.34 (\336ts of an architectural focus, softw) 315 547.73 P
0.34 (are architecture must) 455.46 547.73 P
2.69 (be pro) 315 535.73 P
2.69 (vided with its o) 342.81 535.73 P
2.69 (wn body of speci\336cation lan-) 412.58 535.73 P
6.62 (guages and analysis techniques [Gar95, GPT95,) 315 523.73 P
2.87 (W) 315 511.73 P
2.87 (olf96]. Such languages are needed to demonstrate) 323.64 511.73 P
1.83 (properties of a system upstream, thus minimizing the) 315 499.73 P
0.16 (costs of errors. The) 315 487.73 P
0.16 (y are also needed to pro) 392.54 487.73 P
0.16 (vide abstrac-) 488.46 487.73 P
-0.15 (tions adequate for modeling a lar) 315 475.73 P
-0.15 (ge system, while ensur-) 446.01 475.73 P
5.05 (ing suf) 315 463.73 P
5.05 (\336cient detail for establishing properties of) 347.3 463.73 P
0.08 (interest. A lar) 315 451.73 P
0.08 (ge number of) 369.69 451.73 P
2 F
0.08 (ar) 425.74 451.73 P
0.08 (c) 434.26 451.73 P
0.08 (hitectur) 438.55 451.73 P
0.08 (e description lan-) 469.29 451.73 P
3.69 (gua) 315 439.73 P
3.69 (g) 329.9 439.73 P
3.69 (es) 334.8 439.73 P
0 F
3.69 ( \050ADLs\051 has been proposed, each of which) 343.13 439.73 P
0.68 (embodies a particular approach to the speci\336cation and) 315 427.73 P
4.2 (e) 315 415.73 P
4.2 (v) 319.19 415.73 P
4.2 (olution of an architecture. Examples are Rapide) 323.99 415.73 P
3.03 ([LKA+95, L) 315 403.73 P
3.03 (V95], Aesop [GA) 367.66 403.73 P
3.03 (O94], MetaH [V) 444.53 403.73 P
3.03 (es96],) 515.84 403.73 P
0.1 (UniCon [SDK+95], Darwin [MDEK95, MK96], Wright) 315 391.73 P
-0.1 ([A) 315 379.73 P
-0.1 (G94a, A) 325.15 379.73 P
-0.1 (G94b], C2) 358.53 379.73 P
-0.1 ([MTW96, MOR) 403.15 379.73 P
-0.1 (T96, Med96], and) 467.99 379.73 P
1.1 (SADL) 315 367.73 P
1.1 ([MQR95]. Recently) 343.61 367.73 P
1.1 (, initial w) 424.05 367.73 P
1.1 (ork has been done) 464.21 367.73 P
6.42 (on an architecture interchange language, A) 315 355.73 P
6.42 (CME) 518.33 355.73 P
0.12 ([GMW95, GMW97], which is intended to support map-) 315 343.73 P
2.11 (ping of architectural speci\336cations from one ADL to) 315 331.73 P
1.32 (another) 315 319.73 P
1.32 (, and hence pro) 344.59 319.73 P
1.32 (vide a bridge for their dif) 409.5 319.73 P
1.32 (ferent) 516.68 319.73 P
(foci and resulting support tools.) 315 307.73 T
2.52 (There is still v) 315 287.53 P
2.52 (ery much a lack of consensus in the) 379.9 287.53 P
-0.18 (research community on what an ADL is, what aspects of) 315 275.53 P
-0.12 (an architecture should be modeled by an ADL, and what) 315 263.53 P
-0.07 (should be interchanged in an interchange language. This) 315 251.53 P
6.28 (di) 315 239.53 P
6.28 (v) 322.53 239.53 P
6.28 (er) 327.38 239.53 P
6.28 (gence has resulted in a wide v) 334.97 239.53 P
6.28 (ariation of) 492.34 239.53 P
0.6 (approaches found in this \336rst generation of ADLs. Per-) 315 227.53 P
0.69 (haps e) 315 215.53 P
0.69 (v) 340.71 215.53 P
0.69 (en more signi\336cantly) 345.56 215.53 P
0.69 (, there is a wide dif) 430.73 215.53 P
0.69 (ference) 510.58 215.53 P
0.96 (of opinions as to what problems are most important to) 315 203.53 P
(address in a study of softw) 315 191.53 T
(are architecture.) 421.83 191.53 T
-0 (In our pre) 315 171.33 P
-0 (vious research, we ha) 354.17 171.33 P
-0 (v) 440.05 171.33 P
-0 (e pro) 444.9 171.33 P
-0 (vided a foundation) 465.02 171.33 P
0.67 (for understanding, de\336ning, classifying, and comparing) 315 159.33 P
2.06 (ADLs [Med97, MT97]. In this paper) 315 147.33 P
2.06 (, we b) 471.81 147.33 P
2.06 (uild upon) 499.88 147.33 P
0.37 (those results by identifying and characterizing) 315 135.33 P
2 F
0.37 (ar) 504.42 135.33 P
0.37 (c) 512.94 135.33 P
0.37 (hitec-) 517.23 135.33 P
2 (tur) 315 123.33 P
2 (al) 326.52 123.33 P
2 (domains) 338.8 123.33 P
0 F
2 (, the problems or areas of concern that) 372.69 123.33 P
2.23 (need to be addressed by ADLs. Understanding these) 315 111.33 P
1.54 (domains and their properties is a k) 315 99.33 P
1.54 (e) 461.93 99.33 P
1.54 (y to better under-) 466.22 99.33 P
1.65 (standing the needs of softw) 315 87.33 P
1.65 (are architectures, architec-) 430.92 87.33 P
2.68 (ture-based de) 315 75.33 P
2.68 (v) 371.02 75.33 P
2.68 (elopment, and architectural description) 375.87 75.33 P
(Proceedings of the 1997 USENIX Conference on Domain-Speci\336c Languages) 149.51 762.76 T
(October 15-17, Santa Barbara, California) 223.66 746.76 T
107.72 740.57 504.57 773.43 R
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(2) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.31 (and interchange. A study of architectural domains is) 72 713.33 P
-0.19 (also needed to guide the de) 72 701.33 P
-0.19 (v) 179.38 701.33 P
-0.19 (elopment of ne) 184.23 701.33 P
-0.19 (xt-generation) 243.68 701.33 P
(ADLs.) 72 689.33 T
5.16 (This paper presents a frame) 72 668.56 P
5.16 (w) 202.92 668.56 P
5.16 (ork of architectural) 210.04 668.56 P
1.09 (domains. W) 72 656.56 P
1.09 (e demonstrate that each e) 120.62 656.56 P
1.09 (xisting ADL cur-) 225.93 656.56 P
1.7 (rently supports only a small subset of these domains,) 72 644.56 P
2.03 (and we discuss possible reasons for that. Finally) 72 632.56 P
2.03 (, we) 278.31 632.56 P
0.4 (consider the relationship between architectural domains) 72 620.56 P
(and application domains.) 72 608.56 T
0.35 (While we dra) 72 587.79 P
0.35 (w from pre) 126.42 587.79 P
0.35 (vious ADL w) 171.3 587.79 P
0.35 (ork and reference) 226.34 587.79 P
0.55 (a number of ADLs, the most signi\336cant contrib) 72 575.79 P
0.55 (ution of) 265.06 575.79 P
0.64 (this paper is the frame) 72 563.79 P
0.64 (w) 163.18 563.79 P
0.64 (ork of architectural domains. It) 170.3 563.79 P
1.55 (pro) 72 551.79 P
1.55 (vides structure to a \336eld that has been approached) 85.18 551.79 P
1.87 (lar) 72 539.79 P
1.87 (gely in an ad-hoc f) 82.37 539.79 P
1.87 (ashion thus f) 164.73 539.79 P
1.87 (ar) 219.47 539.79 P
1.87 (. The frame) 226.69 539.79 P
1.87 (w) 276.55 539.79 P
1.87 (ork) 283.67 539.79 P
1.17 (gi) 72 527.79 P
1.17 (v) 79.53 527.79 P
1.17 (es the architect a sound foundation for selecting an) 84.38 527.79 P
0.5 (ADL and orients discourse a) 72 515.79 P
0.5 (w) 188.29 515.79 P
0.5 (ay from ar) 195.41 515.79 P
0.5 (guments about) 237.89 515.79 P
0.8 (notation and more to) 72 503.79 P
0.8 (w) 157.21 503.79 P
0.8 (ards solving important engineer-) 164.33 503.79 P
(ing problems.) 72 491.79 T
2.46 (The remainder of the paper is or) 72 471.02 P
2.46 (g) 215.45 471.02 P
2.46 (anized as follo) 220.4 471.02 P
2.46 (ws.) 283.39 471.02 P
6.14 (Section) 72 459.02 P
6.14 (2 pro) 104.5 459.02 P
6.14 (vides a short discussion of ADLs.) 131.32 459.02 P
4.22 (Section) 72 447.02 P
4.22 (3 presents and moti) 104.5 447.02 P
4.22 (v) 194.96 447.02 P
4.22 (ates each architectural) 199.71 447.02 P
0.12 (domain, while Section) 72 435.02 P
0.12 (4 discusses the support for archi-) 164.47 435.02 P
0.7 (tectural domains in e) 72 423.02 P
0.7 (xisting ADLs. Section) 157.55 423.02 P
0.7 (5 e) 250.62 423.02 P
0.7 (xpounds) 263.11 423.02 P
2.41 (on the relationship between application domains and) 72 411.02 P
5.77 (architectural domains. Discussion and conclusions) 72 399.02 P
(round out the paper) 72 387.02 T
(.) 149.49 387.02 T
1 12 Q
(2. Ov) 72 356.92 T
(er) 99.22 356.92 T
(view of ADLs) 109.75 356.92 T
0 10 Q
2.38 (T) 72 335.48 P
2.38 (o properly enable further discussion, se) 77.31 335.48 P
2.38 (v) 246.17 335.48 P
2.38 (eral de\336ni-) 251.02 335.48 P
2.31 (tions are needed. In this section, we de\336ne softw) 72 323.48 P
2.31 (are) 284.79 323.48 P
0.54 (architectures, architectural styles, and ADLs.) 72 311.48 P
0 8 Q
0.44 (1) 254.4 315.48 P
0 10 Q
0.54 ( W) 258.4 311.48 P
0.54 (e cate-) 270.09 311.48 P
3.26 (gorize ADLs, dif) 72 299.48 P
3.26 (ferentiate them from other) 146.32 299.48 P
3.26 (, similar) 260.96 299.48 P
2.83 (notations, and discuss e) 72 287.48 P
2.83 (xamples of use of ADLs in) 174.79 287.48 P
-0.17 (actual projects. Finally) 72 275.48 P
-0.17 (, we pro) 162.38 275.48 P
-0.17 (vide a short discussion on) 194.37 275.48 P
(our use of the terms \322architecture\323 and \322design.) 72 263.48 T
(\323) 261.8 263.48 T
1 11 Q
(2.1. De\336nitions of Ar) 72 235.05 T
(chitectur) 169.27 235.05 T
(e and Style) 211.23 235.05 T
0 10 Q
1.32 (There is no standard de\336nition of architecture, b) 72 214.95 P
1.32 (ut we) 273.74 214.95 P
0.92 (will use as our w) 72 202.95 P
0.92 (orking de\336nition the one pro) 143.37 202.95 P
0.92 (vided by) 261.36 202.95 P
(Garlan and Sha) 72 190.95 T
(w [GS93]:) 133.5 190.95 T
2 F
2.67 ([) 81 178.18 P
0 F
2.67 (Softw) 84.89 178.18 P
2.67 (are architecture) 108.68 178.18 P
2 F
2.67 ( is a le) 173.26 178.18 P
2.67 (vel of design that]) 207.5 178.18 P
0.98 (goes be) 81 167.18 P
0.98 (yond the algorithms and data structur) 111.95 167.18 P
0.98 (es of) 268.41 167.18 P
-0.2 (the computation: designing and specifying the o) 81 156.18 P
-0.2 (ver-) 271.9 156.18 P
0.23 (all system structur) 81 145.18 P
0.23 (e emer) 154.98 145.18 P
0.23 (g) 181.77 145.18 P
0.23 (es as a ne) 186.67 145.18 P
0.23 (w kind of pr) 226.37 145.18 P
0.23 (ob-) 274.67 145.18 P
2.37 (lem. Structur) 81 134.18 P
2.37 (al issues include gr) 135.44 134.18 P
2.37 (oss or) 219.6 134.18 P
2.37 (ganization) 245.77 134.18 P
72 110 297 130.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
78.57 119.08 180.71 119.08 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
1.79 (1. This section is condensed from a detailed e) 72 104 P
1.79 (xposition on) 250.45 104 P
1.39 (ADLs gi) 72 95 P
1.39 (v) 104.42 95 P
1.39 (en in [Med97] and [MT97], where we pro) 108.78 95 P
1.39 (vided a) 269.36 95 P
0.78 (de\336nition of ADLs and de) 72 86 P
0.78 (vised a classi\336cation and compari-) 169.39 86 P
(son frame) 72 77 T
(w) 107.51 77 T
(ork for them.) 113.92 77 T
2 10 Q
0.45 (and global contr) 324 713.33 P
0.45 (ol structur) 391.13 713.33 P
0.45 (e; pr) 433.16 713.33 P
0.45 (otocols for commu-) 452.32 713.33 P
0.47 (nication, sync) 324 702.33 P
0.47 (hr) 379.87 702.33 P
0.47 (onization, and data access; assign-) 388.31 702.33 P
1.45 (ment of functionality to design elements; physical) 324 691.33 P
0.83 (distrib) 324 680.33 P
0.83 (ution; composition of design elements; scal-) 349.92 680.33 P
0.99 (ing and performance; and selection among design) 324 669.33 P
(alternatives.) 324 658.33 T
0.54 (Ar) 315 638.83 P
0.54 (c) 324.63 638.83 P
0.54 (hitectur) 328.92 638.83 P
0.54 (al style) 359.88 638.83 P
0 F
0.54 ( is \322a set of design rules that identify) 389.03 638.83 P
1.88 (the kinds of components and connectors that may be) 315 626.83 P
1.01 (used to compose a system or subsystem, together with) 315 614.83 P
-0.08 (local or global constraints on the w) 315 602.83 P
-0.08 (ay the composition is) 454.96 602.83 P
(done\323) 315 590.83 T
([SC96].) 341.38 590.83 T
1 11 Q
(2.2. De\336nition of ADLs) 315 562.67 T
0 10 Q
3.12 (Loosely de\336ned, \322an) 315 542.83 P
2 F
3.12 (ADL) 409.92 542.83 P
0 F
3.12 ( for softw) 428.8 542.83 P
3.12 (are applications) 473.83 542.83 P
0.79 (focuses on the high-le) 315 530.83 P
0.79 (v) 405.15 530.83 P
0.79 (el structure of the o) 410 530.83 P
0.79 (v) 490.76 530.83 P
0.79 (erall appli-) 495.61 530.83 P
-0.05 (cation rather than the implementation details of an) 315 518.83 P
-0.05 (y spe-) 515.89 518.83 P
2.73 (ci\336c source module\323 [V) 315 506.83 P
2.73 (es93]. ADLs pro) 417.88 506.83 P
2.73 (vide both a) 490.11 506.83 P
0.26 (concrete syntax and a conceptual frame) 315 494.83 P
0.26 (w) 474.04 494.83 P
0.26 (ork for model-) 481.16 494.83 P
(ing a softw) 315 482.83 T
(are system\325) 359.34 482.83 T
(s) 404.61 482.83 T
2 F
(conceptual) 411 482.83 T
0 F
( architecture.) 454.88 482.83 T
(The b) 315 462.33 T
(uilding blocks of an architectural description are) 337.85 462.33 T
3 11 Q
(\245) 315 449.83 T
2 10 Q
(components) 324 449.83 T
0 F
( - units of computation or data stores;) 371.77 449.83 T
3 11 Q
(\245) 315 437.33 T
2 10 Q
3.09 (connector) 324 437.33 P
3.09 (s) 363.89 437.33 P
0 F
3.09 ( - architectural b) 367.78 437.33 P
3.09 (uilding blocks used to) 442.67 437.33 P
0.82 (model interactions among components and rules that) 324 425.33 P
(go) 324 413.33 T
(v) 333.85 413.33 T
(ern those interactions; and) 338.7 413.33 T
3 11 Q
(\245) 315 400.83 T
2 10 Q
3.09 (ar) 324 400.83 P
3.09 (c) 332.52 400.83 P
3.09 (hitectur) 336.81 400.83 P
3.09 (al con\336gur) 367.77 400.83 P
3.09 (ations) 414.32 400.83 P
0 F
3.09 ( - connected graphs of) 438.77 400.83 P
-0.18 (components and connectors that describe architectural) 324 388.83 P
(structure.) 324 376.83 T
0.14 (An) 315 356.33 P
0.14 (ADL must pro) 330.39 356.33 P
0.14 (vide the means for their) 388.85 356.33 P
2 F
0.14 (e) 487.02 356.33 P
0.14 (xplicit) 491.26 356.33 P
0 F
0.14 ( spec-) 516.26 356.33 P
-0.11 (i\336cation; this criterion enables one to determine whether) 315 344.33 P
0.51 (or not a particular notation is an ADL. In order to infer) 315 332.33 P
0.02 (an) 315 320.33 P
0.02 (y kind of information about an architecture, at a mini-) 324.29 320.33 P
-0.08 (mum,) 315 308.33 P
2 F
-0.08 (interfaces) 340.48 308.33 P
0 F
-0.08 ( of constituent components must also be) 379.92 308.33 P
1.66 (modeled formally) 315 296.33 P
1.66 (. W) 387.39 296.33 P
1.66 (ithout this information, an archi-) 403.09 296.33 P
1.19 (tectural description becomes b) 315 284.33 P
1.19 (ut a collection of \050inter-) 440.28 284.33 P
(connected\051 identi\336ers.) 315 272.33 T
1.05 (An ADL) 315 251.83 P
1.05 (\325) 350.4 251.83 P
1.05 (s conceptual frame) 353.18 251.83 P
1.05 (w) 430.57 251.83 P
1.05 (ork typically subsumes a) 437.68 251.83 P
-0.01 (formal semantic theory) 315 239.83 P
-0.01 (. That theory is part of the ADL) 407.1 239.83 P
-0.01 (\325) 533.33 239.83 P
-0.01 (s) 536.11 239.83 P
1.5 (underlying frame) 315 227.83 P
1.5 (w) 385.39 227.83 P
1.5 (ork for characterizing architectures;) 392.52 227.83 P
0.33 (it in\337uences the ADL) 315 215.83 P
0.33 (\325) 401.45 215.83 P
0.33 (s suitability for modeling particu-) 404.23 215.83 P
0.11 (lar kinds of systems \050e.g., highly concurrent systems\051 or) 315 203.83 P
0.05 (particular aspects of a gi) 315 191.83 P
0.05 (v) 412.7 191.83 P
0.05 (en system \050e.g., its static prop-) 417.55 191.83 P
2.28 (erties\051. Examples of formal speci\336cation theories are) 315 179.83 P
0.07 (Petri nets [Pet62], Statecharts [Har87], partially-ordered) 315 167.83 P
2.6 (e) 315 155.83 P
2.6 (v) 319.19 155.83 P
2.6 (ent sets [L) 324.04 155.83 P
2.6 (VB+93], communicating sequential pro-) 369.9 155.83 P
2.17 (cesses \050CSP\051 [Hoa85], model-based formalisms \050e.g.,) 315 143.83 P
2 F
1.4 (CH) 315 131.83 P
0 F
1.4 (emical) 328.89 131.83 P
2 F
1.4 (A) 359.45 131.83 P
0 F
1.4 (bstract) 365.56 131.83 P
2 F
1.4 (M) 396.12 131.83 P
0 F
1.4 (achine [IW95], Z [Spi89]\051, alge-) 404.45 131.83 P
-0.11 (braic formalisms \050e.g., Obj [GW88]\051, and axiomatic for-) 315 119.83 P
(malisms \050e.g., Anna [Luc87]\051.) 315 107.83 T
0.7 (Finally) 315 87.33 P
0.7 (, e) 342.69 87.33 P
0.7 (v) 352.58 87.33 P
0.7 (en though the suitability of a gi) 357.43 87.33 P
0.7 (v) 486.41 87.33 P
0.7 (en language) 491.26 87.33 P
2.23 (for modeling architectures is independent of whether) 315 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(3) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (and what kinds of) 72 713.33 P
2 F
0.2 (tool support) 146.7 713.33 P
0 F
0.2 ( it pro) 195.52 713.33 P
0.2 (vides, an accompa-) 219.67 713.33 P
0.42 (n) 72 701.33 P
0.42 (ying toolset will render an ADL both more usable and) 76.85 701.33 P
2.81 (useful. Furthermore, capabilities pro) 72 689.33 P
2.81 (vided by such a) 226.09 689.33 P
4.22 (toolset are often a direct re\337ection of the ADL) 72 677.33 P
4.22 (\325) 290.33 677.33 P
4.22 (s) 293.11 677.33 P
(intended use.) 72 665.33 T
1 11 Q
(2.3. Categorizing ADLs) 72 637.29 T
0 10 Q
2.35 (Existing languages that are commonly referred to as) 72 617.58 P
1.66 (ADLs can be grouped into three cate) 72 605.58 P
1.66 (gories, based on) 228.98 605.58 P
(ho) 72 593.58 T
(w the) 81.75 593.58 T
(y model con\336gurations:) 103.54 593.58 T
3 11 Q
(\245) 72 581.21 T
2 10 Q
3.67 (implicit con\336gur) 81 581.21 P
3.67 (ation langua) 150.91 581.21 P
3.67 (g) 205.32 581.21 P
3.67 (es) 210.23 581.21 P
0 F
3.67 (model con\336gura-) 224.73 581.21 P
1.78 (tions implicitly through interconnection information) 81 569.21 P
3.48 (that is distrib) 81 557.21 P
3.48 (uted across de\336nitions of indi) 139.99 557.21 P
3.48 (vidual) 272 557.21 P
(components and connectors;) 81 545.21 T
3 11 Q
(\245) 72 532.83 T
2 10 Q
0.75 (in-line con\336gur) 81 532.83 P
0.75 (ation langua) 143.54 532.83 P
0.75 (g) 195.04 532.83 P
0.75 (es) 199.94 532.83 P
0 F
0.75 (model con\336gurations) 211.52 532.83 P
1.22 (e) 81 520.83 P
1.22 (xplicitly) 85.29 520.83 P
1.22 (, b) 117.98 520.83 P
1.22 (ut specify connector information only as) 129 520.83 P
(part of the con\336guration, \322in line\323;) 81 508.83 T
3 11 Q
(\245) 72 496.46 T
2 10 Q
1.26 (e) 81 496.46 P
1.26 (xplicit con\336gur) 85.24 496.46 P
1.26 (ation langua) 147.18 496.46 P
1.26 (g) 199.17 496.46 P
1.26 (es) 204.07 496.46 P
0 F
1.26 (model both compo-) 216.16 496.46 P
(nents and connectors separately from con\336gurations.) 81 484.46 T
0.19 (The \336rst cate) 72 464.08 P
0.19 (gory) 124.43 464.08 P
0.19 (, implicit con\336guration languages, are,) 142.11 464.08 P
1.7 (by de\336nition gi) 72 452.08 P
1.7 (v) 136.26 452.08 P
1.7 (en in this paper) 141.12 452.08 P
1.7 (,) 207.19 452.08 P
2 F
1.7 (not) 213.88 452.08 P
0 F
1.7 ( ADLs, although) 226.66 452.08 P
3.1 (the) 72 440.08 P
3.1 (y may serv) 84.07 440.08 P
3.1 (e as useful tools in modeling certain) 133.99 440.08 P
0.2 (aspects of architectures. An e) 72 428.08 P
0.2 (xample of an implicit con-) 190.1 428.08 P
0.01 (\336guration language is ArT) 72 416.08 P
0.01 (ek [TLPD95]. In ArT) 177.15 416.08 P
0.01 (ek, there) 262.56 416.08 P
0.98 (is no con\336guration speci\336cation; instead, each connec-) 72 404.08 P
(tor speci\336es component ports to which it is attached.) 72 392.08 T
0.63 (The focus on conceptual architecture and e) 72 371.71 P
0.63 (xplicit treat-) 247.21 371.71 P
2.36 (ment of connectors as \336rst-class entities dif) 72 359.71 P
2.36 (ferentiate) 259.24 359.71 P
1.51 (ADLs from module interconnection languages \050MILs\051) 72 347.71 P
0.01 ([DK76, PN86], programming languages, and object-ori-) 72 335.71 P
2.64 (ented notations and languages \050e.g., Uni\336ed Method) 72 323.71 P
0.51 ([BR95]\051. MILs typically describe the) 72 311.71 P
2 F
0.51 (uses) 225.66 311.71 P
0 F
0.51 ( relationships) 242.88 311.71 P
0.84 (among modules in an) 72 299.71 P
2 F
0.84 (implemented) 163.67 299.71 P
0 F
0.84 ( system and support) 214.77 299.71 P
0.74 (only one type of connection [A) 72 287.71 P
0.74 (G94a, SG94]. Program-) 199.99 287.71 P
2.89 (ming languages describe a system\325) 72 275.71 P
2.89 (s implementation,) 222.44 275.71 P
1.49 (whose architecture is typically implicit in subprogram) 72 263.71 P
1.9 (de\336nitions and calls. Explicit treatment of connectors) 72 251.71 P
-0.08 (also distinguishes ADLs from OO languages, as demon-) 72 239.71 P
(strated in [L) 72 227.71 T
(VM95].) 119.88 227.71 T
0.38 (It is important to note, ho) 72 207.33 P
0.38 (we) 175.3 207.33 P
0.38 (v) 186.71 207.33 P
0.38 (er) 191.56 207.33 P
0.38 (, that there is less than a) 198.93 207.33 P
-0.03 (\336rm boundary between ADLs and MILs. Certain ADLs,) 72 195.33 P
1.63 (e.g., Wright and Rapide, model components and con-) 72 183.33 P
0.38 (nectors at a high le) 72 171.33 P
0.38 (v) 148.8 171.33 P
0.38 (el of abstraction and do not assume) 153.65 171.33 P
0.92 (or prescribe a particular relationship between an archi-) 72 159.33 P
0.6 (tectural description and an implementation. W) 72 147.33 P
0.6 (e refer to) 259.72 147.33 P
1.56 (these languages as being) 72 135.33 P
2 F
1.56 (implementation independent) 179.34 135.33 P
0 F
1.56 (.) 294.5 135.33 P
2.52 (On the other hand, se) 72 123.33 P
2.52 (v) 167.09 123.33 P
2.52 (eral ADLs, e.g., UniCon and) 171.94 123.33 P
1.44 (MetaH, enforce a high de) 72 111.33 P
1.44 (gree of \336delity of an imple-) 179.53 111.33 P
1.72 (mentation to its architecture. Components modeled in) 72 99.33 P
0.05 (these languages are directly related to their implementa-) 72 87.33 P
2.83 (tions, so that a module interconnection speci\336cation) 72 75.33 P
0.65 (may be indistinguishable from an architectural descrip-) 315 713.33 P
0.53 (tion in such a language. These are) 315 701.33 P
2 F
0.53 (implementation con-) 456.98 701.33 P
(str) 315 689.33 T
(aining) 325.41 689.33 T
0 F
( languages.) 350.97 689.33 T
1 11 Q
(2.4. A) 315 660.07 T
(pplications of ADLs) 341.92 660.07 T
0 10 Q
0.15 (ADLs are special purpose notations whose v) 315 639.13 P
0.15 (ery speci\336c) 494.03 639.13 P
0.2 (foci render them suitable for po) 315 627.13 P
0.2 (werful analyses, simula-) 442.12 627.13 P
2.85 (tion, and automated code generation. Ho) 315 615.13 P
2.85 (we) 491.45 615.13 P
2.85 (v) 502.86 615.13 P
2.85 (er) 507.71 615.13 P
2.85 (, the) 515.08 615.13 P
2.85 (y) 535 615.13 P
2.84 (ha) 315 603.13 P
2.84 (v) 324.24 603.13 P
2.84 (e yet to \336nd their place in mainstream softw) 329.09 603.13 P
2.84 (are) 527.79 603.13 P
0.08 (de) 315 591.13 P
0.08 (v) 324.19 591.13 P
0.08 (elopment. Although current research is under w) 329.04 591.13 P
0.08 (ay to) 520.2 591.13 P
1.19 (bridge the g) 315 579.13 P
1.19 (ap that separates ADLs from more widely) 365.11 579.13 P
0.56 (used design notations [RMRR97], only a small number) 315 567.13 P
3.28 (of e) 315 555.13 P
3.28 (xisting ADLs ha) 333.4 555.13 P
3.28 (v) 405.87 555.13 P
3.28 (e been applied to lar) 410.72 555.13 P
3.28 (ge-scale,) 504.74 555.13 P
0.38 (\322real-w) 315 543.13 P
0.38 (orld\323 e) 344.88 543.13 P
0.38 (xamples to date. What these e) 372.6 543.13 P
0.38 (xamples do) 493.79 543.13 P
-0.02 (demonstrate is the potential for ef) 315 531.13 P
-0.02 (fecti) 449.37 531.13 P
-0.02 (v) 466.89 531.13 P
-0.02 (e use of ADLs in) 471.74 531.13 P
(softw) 315 519.13 T
(are projects.) 337.12 519.13 T
2.45 (Wright w) 315 497.53 P
2.45 (as used to model and analyze the) 355.4 497.53 P
2 F
2.45 (Runtime) 506.67 497.53 P
3.9 (Infr) 315 485.53 P
3.9 (astructur) 329.85 485.53 P
3.9 (e) 366.15 485.53 P
0 F
3.9 ( \050R) 370.59 485.53 P
3.9 (TI\051 of the Department of Defense) 386.39 485.53 P
1.27 (\050DoD\051) 315 473.53 P
2 F
1.27 (High-Le) 344.87 473.53 P
1.27 (vel Ar) 378.05 473.53 P
1.27 (c) 403.11 473.53 P
1.27 (hitectur) 407.4 473.53 P
1.27 (e for Simulations) 438.14 473.53 P
0 F
1.27 (\050HLA\051) 512.79 473.53 P
0.09 ([All96]. The original speci\336cation for R) 315 461.53 P
0.09 (TI w) 474.86 461.53 P
0.09 (as o) 494.01 461.53 P
0.09 (v) 509.79 461.53 P
0.09 (er 100) 514.64 461.53 P
1.21 (pages long. Wright w) 315 449.53 P
1.21 (as able to substantially condense) 404.63 449.53 P
0.98 (the speci\336cation and re) 315 437.53 P
0.98 (v) 410.15 437.53 P
0.98 (eal se) 415.01 437.53 P
0.98 (v) 438.22 437.53 P
0.98 (eral inconsistencies and) 443.07 437.53 P
(weaknesses in it.) 315 425.53 T
0.28 (SADL w) 315 403.93 P
0.28 (as applied to an operational po) 351.01 403.93 P
0.28 (wer) 474.66 403.93 P
0.28 (-control sys-) 489.45 403.93 P
1.16 (tem, used by the T) 315 391.93 P
1.16 (ok) 392.98 391.93 P
1.16 (yo Electric Po) 402.83 391.93 P
1.16 (wer Compan) 461.56 391.93 P
1.16 (y) 513.94 391.93 P
1.16 (. The) 518.29 391.93 P
0.34 (system w) 315 379.93 P
0.34 (as implemented in 200,000 lines of F) 352.74 379.93 P
0.34 (ortran 77) 503.27 379.93 P
1.1 (code. SADL w) 315 367.93 P
1.1 (as used to formalize the system\325) 376.8 367.93 P
1.1 (s refer-) 510.32 367.93 P
2.21 (ence architecture and ensure its consistenc) 315 355.93 P
2.21 (y with the) 495.58 355.93 P
(implementation architecture.) 315 343.93 T
2.8 (Finally) 315 322.33 P
2.8 (, Rapide has been used in se) 342.69 322.33 P
2.8 (v) 471.73 322.33 P
2.8 (eral lar) 476.58 322.33 P
2.8 (ge-scale) 507.24 322.33 P
2.27 (projects thus f) 315 310.33 P
2.27 (ar) 376.11 310.33 P
2.27 (. A representati) 383.33 310.33 P
2.27 (v) 448.99 310.33 P
2.27 (e e) 453.85 310.33 P
2.27 (xample is the X/) 467.35 310.33 P
0.95 (Open Distrib) 315 298.33 P
0.95 (uted T) 367.69 298.33 P
0.95 (ransaction Processing \050DTP\051 Indus-) 394.12 298.33 P
-0.13 (try Standard. The documentation for the standard is o) 315 286.33 P
-0.13 (v) 527.38 286.33 P
-0.13 (er) 532.23 286.33 P
2.15 (400 pages long. Its reference architecture and subse-) 315 274.33 P
1.57 (quent e) 315 262.33 P
1.57 (xtensions ha) 345.58 262.33 P
1.57 (v) 396.67 262.33 P
1.57 (e been successfully speci\336ed and) 401.52 262.33 P
(simulated in Rapide [LKA+95].) 315 250.33 T
1 11 Q
(2.5. Ar) 315 221.07 T
(chitectur) 346.88 221.07 T
(e vs. Design) 388.83 221.07 T
0 10 Q
0.16 (Gi) 315 200.13 P
0.16 (v) 324.75 200.13 P
0.16 (en the abo) 329.6 200.13 P
0.16 (v) 370.87 200.13 P
0.16 (e de\336nition of softw) 375.72 200.13 P
0.16 (are architectures and) 456.94 200.13 P
2.72 (ADLs, an issue w) 315 188.13 P
2.72 (orth addressing is the relationship) 394.15 188.13 P
4.46 (between architecture and design. Current literature) 315 176.13 P
2.13 (lea) 315 164.13 P
2.13 (v) 326.46 164.13 P
2.13 (es this question lar) 331.31 164.13 P
2.13 (gely unanswered, allo) 412.23 164.13 P
2.13 (wing for) 503.71 164.13 P
(se) 315 152.13 T
(v) 323.08 152.13 T
(eral interpretations:) 327.93 152.13 T
3 11 Q
(\245) 315 138.53 T
0 10 Q
(architecture and design are the same;) 324 138.53 T
3 11 Q
(\245) 315 124.93 T
0 10 Q
0.88 (architecture is at a le) 324 124.93 P
0.88 (v) 410.02 124.93 P
0.88 (el of abstraction abo) 414.86 124.93 P
0.88 (v) 498.72 124.93 P
0.88 (e design,) 503.57 124.93 P
1.96 (so it is simply another step \050artif) 324 112.93 P
1.96 (act\051 in a softw) 465.09 112.93 P
1.96 (are) 527.79 112.93 P
(de) 324 100.93 T
(v) 333.19 100.93 T
(elopment process; and) 338.04 100.93 T
3 11 Q
(\245) 315 87.33 T
0 10 Q
0.3 (architecture is something ne) 324 87.33 P
0.3 (w and is someho) 437.12 87.33 P
0.3 (w dif) 504.69 87.33 P
0.3 (fer-) 525.57 87.33 P
(ent from design \050b) 324 75.33 T
(ut just ho) 397.4 75.33 T
(w remains unspeci\336ed\051.) 434.38 75.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(4) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.51 (All three interpretations are partially correct. T) 72 713.33 P
0.51 (o a lar) 261.73 713.33 P
0.51 (ge) 287.56 713.33 P
1.04 (e) 72 701.33 P
1.04 (xtent, architectures serv) 76.29 701.33 P
1.04 (e the same purpose as design.) 173.48 701.33 P
-0.22 (Ho) 72 689.33 P
-0.22 (we) 83.97 689.33 P
-0.22 (v) 95.38 689.33 P
-0.22 (er) 100.23 689.33 P
-0.22 (, their e) 107.6 689.33 P
-0.22 (xplicit focus on connectors and con\336gu-) 137.28 689.33 P
3.63 (rations distinguishes them from traditional softw) 72 677.33 P
3.63 (are) 284.79 677.33 P
-0.18 (design. At the same time, as a \050high le) 72 665.33 P
-0.18 (v) 223.09 665.33 P
-0.18 (el\051 architecture is) 227.94 665.33 P
1.44 (re\336ned, connectors lose prominence by becoming dis-) 72 653.33 P
0.29 (trib) 72 641.33 P
0.29 (uted across the \050lo) 85.69 641.33 P
0.29 (wer le) 159.35 641.33 P
0.29 (v) 184.1 641.33 P
0.29 (el\051 architecture\325) 188.95 641.33 P
0.29 (s elements.) 252.27 641.33 P
1.13 (Such a lo) 72 629.33 P
1.13 (wer le) 111.23 629.33 P
1.13 (v) 136.82 629.33 P
1.13 (el architecture may indeed be consid-) 141.67 629.33 P
0.99 (ered to be a design. K) 72 617.33 P
0.99 (eeping this relationship in mind,) 163.88 617.33 P
0.9 (for reasons of simplicity we will simply refer to archi-) 72 605.33 P
0.33 (tectures as \322high le) 72 593.33 P
0.33 (v) 149.12 593.33 P
0.33 (el,) 153.97 593.33 P
0.33 (\323 \322lo) 162.99 593.33 P
0.33 (w le) 182.23 593.33 P
0.33 (v) 199.26 593.33 P
0.33 (el,) 204.1 593.33 P
0.33 (\323 and so forth, in the) 213.12 593.33 P
-0.01 (remainder of the paper) 72 581.33 P
-0.01 (, while \322design\323 will only refer to) 162.37 581.33 P
(the process that results in an architecture.) 72 569.33 T
1 12 Q
(3. Ar) 72 535.46 T
(chitectural Domains) 97.78 535.46 T
0 10 Q
2.04 (ADLs typically share syntactic constructs that enable) 72 510.26 P
1.46 (them to model components and component interf) 72 498.26 P
1.46 (aces,) 277.29 498.26 P
0.45 (connectors, and con\336gurations.) 72 486.26 P
0 8 Q
0.36 (2) 197.89 490.26 P
0 10 Q
0.45 ( A much greater source) 201.89 486.26 P
-0.07 (of di) 72 474.26 P
-0.07 (v) 90.29 474.26 P
-0.07 (er) 95.14 474.26 P
-0.07 (gence are the dif) 102.73 474.26 P
-0.07 (ferent ADLs\325 conceptual frame-) 168.64 474.26 P
2.31 (w) 72 462.26 P
2.31 (orks, and, consequently) 79.12 462.26 P
2.31 (, their support for modeling) 177.51 462.26 P
0.72 (architectural semantics. ADL de) 72 450.26 P
0.72 (v) 203.31 450.26 P
0.72 (elopers typically ha) 208.16 450.26 P
0.72 (v) 287.71 450.26 P
0.72 (e) 292.56 450.26 P
0.19 (decided to focus on a speci\336c aspect of architectures, or) 72 438.26 P
0.18 (an) 72 426.26 P
2 F
0.18 (ar) 84.12 426.26 P
0.18 (c) 92.64 426.26 P
0.18 (hitectur) 96.93 426.26 P
0.18 (al domain) 127.89 426.26 P
0 F
0.18 (, which guides their selection of) 168.35 426.26 P
0.96 (an underlying semantic model and a set of related for-) 72 414.26 P
1.3 (mal speci\336cation notations. These formal notations, in) 72 402.26 P
-0.08 (turn, restrict the types of problems for which the ADL is) 72 390.26 P
(suitable.) 72 378.26 T
1.3 (This relationship between an architectural domain and) 72 353.71 P
1.41 (candidate formal notations is rarely straightforw) 72 341.71 P
1.41 (ard or) 271.99 341.71 P
2.01 (fully understood. In the absence of objecti) 72 329.71 P
2.01 (v) 252.38 329.71 P
2.01 (e criteria,) 257.23 329.71 P
1.33 (ADL researchers are forced to base their decisions on) 72 317.71 P
4.38 (intuition, e) 72 305.71 P
4.38 (xperience, and biases arising from past) 119.57 305.71 P
1 (research accomplishments. Unfortunately) 72 293.71 P
1 (, intuition can) 239.71 293.71 P
2.72 (often be misleading and e) 72 281.71 P
2.72 (xperience insuf) 185.5 281.71 P
2.72 (\336cient in a) 249.34 281.71 P
(young discipline such as softw) 72 269.72 T
(are architectures.) 194.67 269.72 T
0.17 (In this paper) 72 245.18 P
0.17 (, we attempt to \336ll this v) 121.94 245.18 P
0.17 (oid. The remainder) 220.28 245.18 P
-0.17 (of this section moti) 72 233.18 P
-0.17 (v) 148.2 233.18 P
-0.17 (ates and formulates a frame) 152.95 233.18 P
-0.17 (w) 262.56 233.18 P
-0.17 (ork for) 269.68 233.18 P
0.65 (classifying the problems on which architectural models) 72 221.18 P
-0.09 (focus \050architectural domains\051, sho) 72 209.18 P
-0.09 (wn in Figure) 207.56 209.18 P
-0.09 (1. Archi-) 260.99 209.18 P
2.23 (tectural domains represent broad classes of problems) 72 197.18 P
1.2 (and are lik) 72 185.18 P
1.2 (ely to be re\337ected in man) 116.5 185.18 P
1.2 (y ADLs and their) 223.7 185.18 P
4.39 (associated formal speci\336cation language constructs.) 72 173.18 P
1.46 (Their proper understanding is thus necessary) 72 161.18 P
1.46 (. Further-) 257.77 161.18 P
1.31 (more, heuristics may be de) 72 149.18 P
1.31 (v) 184.46 149.18 P
1.31 (eloped o) 189.3 149.18 P
1.31 (v) 224.62 149.18 P
1.31 (er time that will) 229.47 149.18 P
2.05 (enable easier interchange of architectures modeled in) 72 137.18 P
2.37 (ADLs that focus on particular architectural domains.) 72 125.18 P
72 101 297 121.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
78.57 110.08 180.71 110.08 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.5 (2. One can think of these syntactic features as equi) 72 95 P
0.5 (v) 258.73 95 P
0.5 (alent to a) 263.01 95 P
0.35 (\322box) 72 86 P
0.35 (es and arro) 89.36 86 P
0.35 (ws\323 graphical notation with little or no under-) 129.32 86 P
(lying semantics.) 72 77 T
0 10 Q
1.91 (Finally) 315 713.33 P
1.91 (, such a frame) 342.69 713.33 P
1.91 (w) 404.26 713.33 P
1.91 (ork can be used as a guide in) 411.38 713.33 P
(de) 315 701.33 T
(v) 324.19 701.33 T
(eloping future ADLs.) 329.04 701.33 T
1 9 Q
(Figur) 315 582.47 T
(e 1:) 336.34 582.47 T
0 F
(Architectural domains.) 352.33 582.47 T
1 11 Q
(3.1. Repr) 315 556.58 T
(esentation) 357.88 556.58 T
0 10 Q
0.95 (A k) 315 536.68 P
0.95 (e) 330.57 536.68 P
0.95 (y role of an e) 334.86 536.68 P
0.95 (xplicit representation of an architec-) 391.25 536.68 P
0.35 (ture is to aid understanding and communication about a) 315 524.68 P
0.99 (softw) 315 512.68 P
0.99 (are system among dif) 337.12 512.68 P
0.99 (ferent stak) 425.64 512.68 P
0.99 (eholders. F) 468.46 512.68 P
0.99 (or this) 513.73 512.68 P
0.72 (reason, it is important that architectural descriptions be) 315 500.68 P
3 (simple, understandable, and possibly graphical, with) 315 488.68 P
1.61 (well understood, b) 315 476.68 P
1.61 (ut not necessarily formally de\336ned,) 392.18 476.68 P
(semantics.) 315 464.68 T
0.05 (Architectural models typically comprise multiple vie) 315 444.13 P
0.05 (ws,) 526.39 444.13 P
1.81 (e.g., high le) 315 432.13 P
1.81 (v) 365.3 432.13 P
1.81 (el graphical vie) 370.15 432.13 P
1.81 (w) 435.17 432.13 P
1.81 (, lo) 441.74 432.13 P
1.81 (wer le) 456.08 432.13 P
1.81 (v) 482.35 432.13 P
1.81 (el vie) 487.2 432.13 P
1.81 (w with) 510.69 432.13 P
2.9 (formal speci\336cations of components and connectors,) 315 420.13 P
2.68 (conceptual architecture, one or more implementation) 315 408.13 P
0.95 (architectures, corresponding de) 315 396.13 P
0.95 (v) 441.89 396.13 P
0.95 (elopment process, data) 446.73 396.13 P
0.96 (or control \337o) 315 384.13 P
0.96 (w vie) 368.88 384.13 P
0.96 (w) 391.53 384.13 P
0.96 (, and so on. Dif) 398.1 384.13 P
0.96 (ferent stak) 463.33 384.13 P
0.96 (eholders) 506.12 384.13 P
0.81 (\050e.g., architects, de) 315 372.13 P
0.81 (v) 391.91 372.13 P
0.81 (elopers, managers, customers\051 may) 396.76 372.13 P
0.56 (require dif) 315 360.13 P
0.56 (ferent vie) 357.24 360.13 P
0.56 (ws of the architecture. The custom-) 395.58 360.13 P
3.37 (ers may be satis\336ed with a high-le) 315 348.13 P
3.37 (v) 471.63 348.13 P
3.37 (el, \322box) 476.48 348.13 P
3.37 (es and) 511.36 348.13 P
1.38 (arro) 315 336.13 P
1.38 (ws\323 description, the de) 330.85 336.13 P
1.38 (v) 426.4 336.13 P
1.38 (elopers may w) 431.25 336.13 P
1.38 (ant detailed) 492.24 336.13 P
1.26 (component and connector models, while the managers) 315 324.13 P
(may require a vie) 315 312.13 T
(w of the de) 384.45 312.13 T
(v) 428.91 312.13 T
(elopment process.) 433.76 312.13 T
1 11 Q
(3.2. Design Pr) 315 283.9 T
(ocess Support) 380.19 283.9 T
0 10 Q
0.5 (Softw) 315 264.01 P
0.5 (are architects decompose lar) 338.79 264.01 P
0.5 (ge, distrib) 453.67 264.01 P
0.5 (uted, heter-) 493.96 264.01 P
0.03 (ogeneous systems into smaller b) 315 252.01 P
0.03 (uilding blocks. In doing) 444.35 252.01 P
0.2 (so, the) 315 240.01 P
0.2 (y ha) 341.16 240.01 P
0.2 (v) 358.09 240.01 P
0.2 (e to consider man) 362.94 240.01 P
0.2 (y issues, mak) 434.2 240.01 P
0.2 (e man) 488.11 240.01 P
0.2 (y deci-) 512.31 240.01 P
1.32 (sions, and utilize man) 315 228.01 P
1.32 (y design techniques, methodolo-) 406.04 228.01 P
(gies, and tools.) 315 216.01 T
0.64 (Modeling architectures from multiple perspecti) 315 195.45 P
0.64 (v) 506.18 195.45 P
0.64 (es, dis-) 511.03 195.45 P
1.46 (cussed in the pre) 315 183.45 P
1.46 (vious subsection, is only one w) 386.06 183.45 P
1.46 (ay of) 518.27 183.45 P
4.65 (supporting softw) 315 171.45 P
4.65 (are architects\325 cogniti) 387.05 171.45 P
4.65 (v) 482.74 171.45 P
4.65 (e processes.) 487.59 171.45 P
1.61 (Others include deli) 315 159.45 P
1.61 (v) 394.07 159.45 P
1.61 (ering design guidance in a timely) 398.92 159.45 P
0.86 (and understandable f) 315 147.45 P
0.86 (ashion, capturing design rationale,) 399.93 147.45 P
(and re) 315 135.45 T
(visiting past design steps.) 339.46 135.45 T
1 11 Q
(3.3. Analysis) 315 107.23 T
0 10 Q
0.35 (Architectures are often intended to model lar) 315 87.33 P
0.35 (ge, distrib-) 496.32 87.33 P
2.42 (uted, concurrent systems. The ability to e) 315 75.33 P
2.42 (v) 494.23 75.33 P
2.42 (aluate the) 498.98 75.33 P
315 590.03 537.8 685.44 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 590.03 537.8 685.44 R
6 X
0 0 0 1 0 0 0 K
V
4 8 Q
0 X
(Representation) 329.17 677.16 T
(Design Process Support) 329.17 669.16 T
(Analysis) 329.17 661.16 T
(Static) 343.35 653.16 T
(Dynamic) 343.35 645.16 T
(Evolution) 329.17 637.16 T
(Specification-Time) 343.35 629.16 T
(Execution-Time) 343.35 621.16 T
(Refinement) 329.17 613.16 T
(Traceability) 329.17 605.16 T
(Simulation/Executability) 329.17 597.16 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(5) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (properties of such systems upstream, at the architectural) 72 713.33 P
3.24 (le) 72 701.33 P
3.24 (v) 78.97 701.33 P
3.24 (el, can substantially lessen the number of errors) 83.82 701.33 P
1 (passed do) 72 689.33 P
1 (wnstream. Gi) 111.91 689.33 P
1 (v) 166.53 689.33 P
1 (en that unnecessary details are) 171.38 689.33 P
1 (abstracted a) 72 677.33 P
1 (w) 120.33 677.33 P
1 (ay in architectures, the analysis task may) 127.45 677.33 P
(also be easier to perform than at source code le) 72 665.33 T
(v) 259.75 665.33 T
(el.) 264.6 665.33 T
1.55 (Analysis of architectures may be performed statically) 72 644.63 P
1.55 (,) 294.5 644.63 P
2.25 (before e) 72 632.63 P
2.25 (x) 106.58 632.63 P
2.25 (ecution, or dynamically) 111.43 632.63 P
2.25 (, at runtime. Certain) 209.99 632.63 P
1.25 (types of analysis can be performed both statically and) 72 620.63 P
(dynamically) 72 608.63 T
(.) 120.79 608.63 T
1 F
(3.3.1. Static Analysis) 72 581.93 T
0 F
3.27 (Examples of static analysis are internal consistenc) 72 563.23 P
3.27 (y) 292 563.23 P
2.56 (checks, such as whether appropriate components are) 72 551.23 P
1.19 (connected and their interf) 72 539.23 P
1.19 (aces match, whether connec-) 177.93 539.23 P
0.45 (tors enable desired communication, whether constraints) 72 527.23 P
1.99 (are satis\336ed, and whether the combined semantics of) 72 515.23 P
2.88 (components and connectors result in desired system) 72 503.23 P
1.14 (beha) 72 491.23 P
1.14 (vior) 90.68 491.23 P
1.14 (. Certain concurrent and distrib) 106.24 491.23 P
1.14 (uted aspects of) 235.29 491.23 P
1.3 (an architecture can also be assessed statically) 72 479.23 P
1.3 (, such as) 260.23 479.23 P
0.33 (the potential for deadlocks and starv) 72 467.23 P
0.33 (ation, performance,) 218.64 467.23 P
0.32 (reliability) 72 455.23 P
0.32 (, security) 110.24 455.23 P
0.32 (, and so on. Finally) 146.57 455.23 P
0.32 (, architectures can) 223.88 455.23 P
0.29 (be statically analyzed for adherence to design heuristics) 72 443.23 P
(and style rules.) 72 431.23 T
1 F
(3.3.2. Dynamic Analysis) 72 404.53 T
0 F
1.61 (Examples of dynamic analysis are testing, deb) 72 385.83 P
1.61 (ugging,) 266.72 385.83 P
0.56 (assertion checking, and assessment of the performance,) 72 373.83 P
1.23 (reliability) 72 361.83 P
1.23 (, and schedulability of an e) 110.24 361.83 P
1.23 (x) 224 361.83 P
1.23 (ecuting architec-) 228.85 361.83 P
0.84 (ture. Saying that an architecture is e) 72 349.83 P
0.84 (x) 220.49 349.83 P
0.84 (ecuting can mean) 225.34 349.83 P
(tw) 72 337.83 T
(o dif) 81.9 337.83 T
(ferent things:) 100.26 337.83 T
3 11 Q
(\245) 72 325.13 T
0 10 Q
1.23 (the system b) 81 325.13 P
1.23 (uilt based on the architecture is e) 133.27 325.13 P
1.23 (x) 272.16 325.13 P
1.23 (ecut-) 277.01 325.13 P
(ing, or) 81 313.13 T
3 11 Q
(\245) 72 300.43 T
0 10 Q
0.16 (the runtime beha) 81 300.43 P
0.16 (vior of the architecture itself is being) 148.32 300.43 P
(simulated.) 81 288.43 T
1.49 (Clearly) 72 267.73 P
1.49 (, certain analyses, such as performance or reli-) 100.79 267.73 P
-0.07 (ability) 72 255.73 P
-0.07 (, are more meaningful or e) 96.91 255.73 P
-0.07 (v) 202.41 255.73 P
-0.07 (en only possible in the) 207.26 255.73 P
0.28 (former case. Ho) 72 243.73 P
0.28 (we) 136.44 243.73 P
0.28 (v) 147.85 243.73 P
0.28 (er) 152.7 243.73 P
0.28 (, an implementation of the system) 160.07 243.73 P
0.78 (may not yet e) 72 231.73 P
0.78 (xist. Furthermore, it may be substantially) 128.36 231.73 P
0.21 (less e) 72 219.73 P
0.21 (xpensi) 94 219.73 P
0.21 (v) 119.86 219.73 P
0.21 (e to perform dynamic analyses in the latter) 124.71 219.73 P
2.92 (case, particularly when the relationship between the) 72 207.73 P
0.52 (architecture and the implemented system is well under-) 72 195.73 P
(stood.) 72 183.73 T
1 11 Q
(3.4. Ev) 72 155.37 T
(olution) 103.98 155.37 T
0 10 Q
0.62 (Support for softw) 72 135.33 P
0.62 (are e) 143.69 135.33 P
0.62 (v) 163.21 135.33 P
0.62 (olution is a k) 168.01 135.33 P
0.62 (e) 221.71 135.33 P
0.62 (y aspect of archi-) 226 135.33 P
5.05 (tecture-based de) 72 123.33 P
5.05 (v) 142.05 123.33 P
5.05 (elopment. Architectures e) 146.9 123.33 P
5.05 (v) 259.8 123.33 P
5.05 (olv) 264.6 123.33 P
5.05 (e to) 277.23 123.33 P
0.99 (re\337ect e) 72 111.33 P
0.99 (v) 104.67 111.33 P
0.99 (olution of a single softw) 109.47 111.33 P
0.99 (are system; the) 210.57 111.33 P
0.99 (y also) 272.4 111.33 P
1.17 (e) 72 99.33 P
1.17 (v) 76.19 99.33 P
1.17 (olv) 80.99 99.33 P
1.17 (e into f) 93.62 99.33 P
1.17 (amilies of related systems. As design ele-) 124.18 99.33 P
0.37 (ments, indi) 72 87.33 P
0.37 (vidual components and connectors within an) 116.57 87.33 P
(architecture may also e) 72 75.33 T
(v) 164.22 75.33 T
(olv) 169.02 75.33 T
(e.) 181.65 75.33 T
0.55 (Ev) 315 713.33 P
0.55 (olution of components, connectors, and architectures) 325.91 713.33 P
(can occur at speci\336cation time or e) 315 701.33 T
(x) 454.26 701.33 T
(ecution time.) 459.11 701.33 T
1 F
(3.4.1. Speci\336cation-T) 315 674.46 T
(ime Ev) 404.27 674.46 T
(olution) 433.89 674.46 T
0 F
1.05 (If we consider components and connectors to be types) 315 655.58 P
1.7 (which are instantiated e) 315 643.58 P
1.7 (v) 414.56 643.58 P
1.7 (ery time the) 419.41 643.58 P
1.7 (y are used in an) 470.43 643.58 P
2.17 (architecture, their e) 315 631.58 P
2.17 (v) 396.56 631.58 P
2.17 (olution can be vie) 401.36 631.58 P
2.17 (wed simply in) 478.99 631.58 P
1.53 (terms of subtyping. Since components and connectors) 315 619.58 P
0.62 (are modeled at a high le) 315 607.58 P
0.62 (v) 413.67 607.58 P
0.62 (el of abstraction, \337e) 418.52 607.58 P
0.62 (xible sub-) 499.66 607.58 P
0.54 (typing methods may be emplo) 315 595.58 P
0.54 (yed. F) 438.16 595.58 P
0.54 (or e) 463.55 595.58 P
0.54 (xample, it may) 479.2 595.58 P
-0.23 (be useful to e) 315 583.58 P
-0.23 (v) 367.66 583.58 P
-0.23 (olv) 372.46 583.58 P
-0.23 (e a single component in multiple w) 385.09 583.58 P
-0.23 (ays,) 524.17 583.58 P
2.22 (by using dif) 315 571.58 P
2.22 (ferent subtyping mechanisms \050e.g., inter-) 366.97 571.58 P
(f) 315 559.58 T
(ace, beha) 318.23 559.58 T
(vior) 355.23 559.58 T
(, or a combination of the tw) 370.94 559.58 T
(o\051 [MOR) 481.66 559.58 T
(T96].) 518 559.58 T
2.09 (At the le) 315 538.71 P
2.09 (v) 353.37 538.71 P
2.09 (el of architectures, e) 358.22 538.71 P
2.09 (v) 445.32 538.71 P
2.09 (olution is focused on) 450.12 538.71 P
1.01 (incremental de) 315 526.71 P
1.01 (v) 374.92 526.71 P
1.01 (elopment and support for system f) 379.77 526.71 P
1.01 (ami-) 521.67 526.71 P
2.47 (lies. Incrementality of an architecture can further be) 315 514.71 P
0.65 (vie) 315 502.71 P
0.65 (wed from tw) 326.97 502.71 P
0.65 (o dif) 379.27 502.71 P
0.65 (ferent perspecti) 398.28 502.71 P
0.65 (v) 460.61 502.71 P
0.65 (es. One is its abil-) 465.45 502.71 P
-0.17 (ity to accommodate addition of ne) 315 490.71 P
-0.17 (w components and the) 450.81 490.71 P
2.09 (resulting issues of scale; the other is speci\336cation of) 315 478.71 P
(incomplete architectures.) 315 466.71 T
1 F
(3.4.2. Execution-T) 315 439.83 T
(ime Ev) 392.6 439.83 T
(olution) 422.22 439.83 T
0 F
-0.04 (Explicit modeling of architectures is intended to support) 315 420.96 P
3.6 (de) 315 408.96 P
3.6 (v) 324.19 408.96 P
3.6 (elopment and e) 329.04 408.96 P
3.6 (v) 397.09 408.96 P
3.6 (olution of lar) 401.89 408.96 P
3.6 (ge and potentially) 461.14 408.96 P
1.75 (long-running systems. Being able to e) 315 396.96 P
1.75 (v) 475.18 396.96 P
1.75 (olv) 479.98 396.96 P
1.75 (e such sys-) 492.61 396.96 P
2.16 (tems during e) 315 384.96 P
2.16 (x) 373.61 384.96 P
2.16 (ecution may thus be desirable and, in) 378.46 384.96 P
0.78 (some cases, necessary) 315 372.96 P
0.78 (. Architectures e) 404.49 372.96 P
0.78 (xhibit dynamism) 471.71 372.96 P
1.27 (by allo) 315 360.96 P
1.27 (wing replication, insertion, remo) 343.52 360.96 P
1.27 (v) 478.01 360.96 P
1.27 (al, and recon-) 482.76 360.96 P
3.18 (nection of architectural elements or subarchitectures) 315 348.96 P
(during e) 315 336.96 T
(x) 347.9 336.96 T
(ecution.) 352.75 336.96 T
3.46 (Dynamic changes of an architecture may be either) 315 316.08 P
0.52 (planned at architecture speci\336cation time or unplanned.) 315 304.08 P
1.32 (Both types of dynamic change must be constrained to) 315 292.08 P
1.32 (ensure that no desired architectural properties are vio-) 315 280.08 P
(lated.) 315 268.08 T
1 11 Q
(3.5. Re\336nement) 315 239.54 T
0 10 Q
0.31 (The most common ar) 315 219.33 P
0.31 (gument for creating and using for-) 401.01 219.33 P
1.69 (mal architectural models is that the) 315 207.33 P
1.69 (y are necessary to) 463.57 207.33 P
1.66 (bridge the g) 315 195.33 P
1.66 (ap between informal, \322box) 366.04 195.33 P
1.66 (es and arro) 477.51 195.33 P
1.66 (ws\323) 524.45 195.33 P
5.56 (diagrams and programming languages, which are) 315 183.33 P
0.5 (deemed too lo) 315 171.33 P
0.5 (w-le) 372.4 171.33 P
0.5 (v) 389.92 171.33 P
0.5 (el for designing a system. Architec-) 394.77 171.33 P
-0.25 (tural models may need to be speci\336ed at se) 315 159.33 P
-0.25 (v) 484.4 159.33 P
-0.25 (eral le) 489.25 159.33 P
-0.25 (v) 513.46 159.33 P
-0.25 (els of) 518.31 159.33 P
1.08 (abstraction for dif) 315 147.33 P
1.08 (ferent purposes. F) 388.55 147.33 P
1.08 (or e) 462.49 147.33 P
1.08 (xample, a high) 478.69 147.33 P
0.64 (le) 315 135.33 P
0.64 (v) 321.97 135.33 P
0.64 (el speci\336cation of the architecture can be used as an) 326.82 135.33 P
2.39 (understanding and communication tool; a subsequent) 315 123.33 P
-0.17 (lo) 315 111.33 P
-0.17 (wer le) 322.53 111.33 P
-0.17 (v) 346.82 111.33 P
-0.17 (el may be analyzed for consistenc) 351.67 111.33 P
-0.17 (y of intercon-) 485.91 111.33 P
0.72 (nections; an e) 315 99.33 P
0.72 (v) 371.18 99.33 P
0.72 (en lo) 376.03 99.33 P
0.72 (wer le) 396.22 99.33 P
0.72 (v) 421.4 99.33 P
0.72 (el may be used in a simula-) 426.25 99.33 P
2.79 (tion. Therefore, correct and consistent re\336nement of) 315 87.33 P
0.21 (architectures to subsequently lo) 315 75.33 P
0.21 (wer le) 441.74 75.33 P
0.21 (v) 466.41 75.33 P
0.21 (els of abstraction) 471.26 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(6) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (is imperati) 72 713.33 P
-0.01 (v) 114.24 713.33 P
-0.01 (e. Note that, in this sense, code generation is) 119.09 713.33 P
(simply a special case of architectural re\336nement.) 72 701.33 T
1 11 Q
(3.6. T) 72 667.91 T
(raceability) 97.77 667.91 T
0 10 Q
1.1 (As discussed abo) 72 642.83 P
1.1 (v) 142.93 642.83 P
1.1 (e, a softw) 147.78 642.83 P
1.1 (are architecture often con-) 188.47 642.83 P
0.49 (sists of multiple vie) 72 630.83 P
0.49 (ws and may be modeled at multiple) 151.84 630.83 P
2.76 (le) 72 618.83 P
2.76 (v) 78.97 618.83 P
2.76 (els of abstraction \050Figure) 83.82 618.83 P
2.76 (2\051. W) 194.86 618.83 P
2.76 (e call a particular) 219.58 618.83 P
1.2 (vie) 72 606.83 P
1.2 (w of the architecture at a gi) 83.97 606.83 P
1.2 (v) 200.35 606.83 P
1.2 (en le) 205.2 606.83 P
1.2 (v) 225.31 606.83 P
1.2 (el of abstraction) 230.16 606.83 P
2.55 (\050i.e., a single point in the tw) 72 594.83 P
2.55 (o-dimensional space of) 199.14 594.83 P
1.7 (Figure) 72 582.83 P
1.7 (2\051 an \322architectural cross-section.) 100.61 582.83 P
1.7 (\323 It is critical) 239.41 582.83 P
-0.06 (for changes in one cross-section to be correctly re\337ected) 72 570.83 P
0.25 (in others. A particular architectural cross-section can be) 72 558.83 P
0.41 (considered \322dominant,) 72 546.83 P
0.41 (\323 so that) 162.24 546.83 P
2 F
0.41 (all) 199.29 546.83 P
0 F
0.41 ( changes to the archi-) 209.85 546.83 P
0.22 (tecture are made to it and then re\337ected in others. Ho) 72 534.83 P
0.22 (w-) 286.45 534.83 P
0.4 (e) 72 522.83 P
0.4 (v) 76.19 522.83 P
0.4 (er) 81.04 522.83 P
0.4 (, changes will more frequently be made to the most) 88.41 522.83 P
3.78 (appropriate or con) 72 510.83 P
3.78 (v) 152.47 510.83 P
3.78 (enient cross-section. T) 157.32 510.83 P
3.78 (raceability) 254.79 510.83 P
2.52 (support will hence need to e) 72 498.83 P
2.52 (xist across all pertinent) 196.94 498.83 P
(cross-sections.) 72 486.83 T
-0.01 (One \336nal issue is the consistenc) 72 461.08 P
-0.01 (y of an architecture with) 199.29 461.08 P
0.23 (system requirements. Changes to the requirements must) 72 449.08 P
0.05 (be appropriately re\337ected in the architecture; changes to) 72 437.08 P
1.52 (the architecture must be v) 72 425.08 P
1.52 (alidated ag) 181.13 425.08 P
1.52 (ainst the require-) 226.2 425.08 P
0.54 (ments. Therefore, e) 72 413.08 P
0.54 (v) 150.58 413.08 P
0.54 (en though system requirements are) 155.43 413.08 P
0.06 (in the problem domain, while architecture is in the solu-) 72 401.08 P
0.17 (tion domain, traceability between the tw) 72 389.08 P
0.17 (o is crucial. F) 233.86 389.08 P
0.17 (or) 288.67 389.08 P
0.07 (purposes of traceability) 72 377.08 P
0.07 (, requirements can be considered) 165.36 377.08 P
0.37 (to be at a v) 72 365.08 P
0.37 (ery high le) 117.19 365.08 P
0.37 (v) 160.45 365.08 P
0.37 (el of architectural abstraction, as) 165.3 365.08 P
(sho) 72 353.08 T
(wn in Figure) 85.64 353.08 T
(2.) 139.25 353.08 T
1 9 Q
1.07 (Figur) 72 138 P
1.07 (e 2:) 93.34 138 P
0 F
1.07 (T) 111.47 138 P
1.07 (w) 116.25 138 P
1.07 (o-dimensional space of architectural vie) 122.66 138 P
1.07 (ws and) 270.68 138 P
0.52 (le) 72 129 P
0.52 (v) 78.27 129 P
0.52 (els of abstraction. The v) 82.64 129 P
0.52 (ertical axis is a set of discrete v) 171.33 129 P
0.52 (al-) 287.51 129 P
0.78 (ues with a nominal ordering. The horizontal axis is a contin-) 72 120 P
3.88 (uum with an ordinal ordering of v) 72 111 P
3.88 (alues, where system) 217.01 111 P
0.24 (requirements are considered to be the highest le) 72 102 P
0.24 (v) 245.17 102 P
0.24 (el of abstrac-) 249.54 102 P
0.08 (tion and source code the lo) 72 93 P
0.08 (west. One possible dominant cross-) 168.93 93 P
3.08 (section \050graphical vie) 72 84 P
3.08 (w of the high le) 155.41 84 P
3.08 (v) 224 84 P
3.08 (el architecture\051 is) 228.36 84 P
(sho) 72 75 T
(wn.) 84.28 75 T
1 11 Q
(3.7. Simulation/Executability) 315 712.67 T
0 10 Q
2.04 (Static architectural models are useful for establishing) 315 693.33 P
2 F
5.61 (static) 315 681.33 P
0 F
5.61 ( properties of the modeled system. Certain) 336.67 681.33 P
2.03 (dynamic properties may also be predicted with static) 315 669.33 P
-0.22 (models, b) 315 657.33 P
-0.22 (ut only if speci\336c assumptions hold. F) 353.48 657.33 P
-0.22 (or e) 504.55 657.33 P
-0.22 (xam-) 519.45 657.33 P
0.5 (ple, if the architect can correctly predict e) 315 645.33 P
0.5 (x) 484.93 645.33 P
0.5 (ecution time) 489.78 645.33 P
-0.07 (and criticality of each component, then schedulability of) 315 633.33 P
(the encompassing architecture can be e) 315 621.33 T
(v) 471.09 621.33 T
(aluated.) 475.84 621.33 T
1.74 (On the other hand, other dynamic properties, such as) 315 601.33 P
1.01 (reliability) 315 589.33 P
1.01 (, may by de\336nition require a running system.) 353.24 589.33 P
1.28 (Also, de) 315 577.33 P
1.28 (v) 349.36 577.33 P
1.28 (elopers may w) 354.21 577.33 P
1.28 (ant to produce an early proto-) 415 577.33 P
-0.03 (type to, e.g., attempt allocation of architectural elements) 315 565.33 P
0.42 (to components of the ph) 315 553.33 P
0.42 (ysical system. Other stak) 413.3 553.33 P
0.42 (ehold-) 514.45 553.33 P
1.81 (ers \050e.g., customers or managers\051 may w) 315 541.33 P
1.81 (ant to v) 487.65 541.33 P
1.81 (erify) 521.12 541.33 P
0.87 (early on that the architecture conforms to their wishes.) 315 529.33 P
0.84 (Simulating the dynamic beha) 315 517.33 P
0.84 (vior of a high le) 434.27 517.33 P
0.84 (v) 501.27 517.33 P
0.84 (el archi-) 506.12 517.33 P
0.77 (tecture may thus be preferred to implementing the sys-) 315 505.33 P
1.06 (tem: it is a quick) 315 493.33 P
1.06 (er) 385.83 493.33 P
1.06 (, cheaper) 393.2 493.33 P
1.06 (, and more \337e) 429.95 493.33 P
1.06 (xible w) 487.98 493.33 P
1.06 (ay of) 518.67 493.33 P
(arri) 315 481.33 T
(ving at the desired information.) 328.63 481.33 T
0.88 (A special case of architectural simulation is the e) 315 461.33 P
0.88 (x) 517.94 461.33 P
0.88 (ecu-) 522.79 461.33 P
0.56 (tion of the complete implemented system. The ultimate) 315 449.33 P
-0.08 (goal of an) 315 437.33 P
-0.08 (y softw) 354.68 437.33 P
-0.08 (are design and modeling endea) 384.23 437.33 P
-0.08 (v) 507.58 437.33 P
-0.08 (or is to) 512.38 437.33 P
0.84 (produce such a system. An ele) 315 425.33 P
0.84 (g) 440.71 425.33 P
0.84 (ant and ef) 445.66 425.33 P
0.84 (fecti) 486.53 425.33 P
0.84 (v) 504.05 425.33 P
0.84 (e archi-) 508.9 425.33 P
0.61 (tectural model is of limited v) 315 413.33 P
0.61 (alue, unless it can be con-) 433.64 413.33 P
0.12 (v) 315 401.33 P
0.12 (erted into a running application. A simulation can only) 319.85 401.33 P
2.77 (partially depict the \336nal system\325) 315 389.33 P
2.77 (s dynamic beha) 454.4 389.33 P
2.77 (vior) 521.94 389.33 P
2.77 (.) 537.5 389.33 P
2.04 (Manually transforming an architecture into a running) 315 377.33 P
0.51 (system may result in man) 315 365.33 P
0.51 (y) 419.13 365.33 P
0.51 (, already discussed problems) 423.48 365.33 P
0.5 (of consistenc) 315 353.33 P
0.5 (y and traceability between the architecture) 367.84 353.33 P
0.58 (and its implementation. T) 315 341.33 P
0.58 (echniques, such as re\336nement) 418.83 341.33 P
1.09 (and traceability discussed abo) 315 329.33 P
1.09 (v) 437.83 329.33 P
1.09 (e, must be emplo) 442.68 329.33 P
1.09 (yed to) 514.19 329.33 P
(properly accomplish this task.) 315 317.33 T
1 12 Q
(4. ADL Support f) 315 288 T
(or Ar) 404.04 288 T
(chitectural Domains) 432.14 288 T
0 10 Q
0.13 (In the pre) 315 267.33 P
0.13 (vious section, we moti) 353.34 267.33 P
0.13 (v) 443.49 267.33 P
0.13 (ated and described dif-) 448.24 267.33 P
0.53 (ferent architectural domains in terms of their character-) 315 255.33 P
0.59 (istics and needs of softw) 315 243.33 P
0.59 (are architectures. Another w) 415.59 243.33 P
0.59 (ay) 530.56 243.33 P
-0.24 (of vie) 315 231.33 P
-0.24 (wing architectural domains is in terms of modeling) 337.56 231.33 P
0.21 (languages and speci\336c language features needed to sup-) 315 219.33 P
0.81 (port dif) 315 207.33 P
0.81 (ferent domains. At the same time, a useful w) 345.28 207.33 P
0.81 (ay) 530.56 207.33 P
0.95 (of understanding and classifying architecture modeling) 315 195.33 P
0.86 (languages is in terms of architectural domains the) 315 183.33 P
0.86 (y are) 519.43 183.33 P
0.09 (intended to support. F) 315 171.33 P
0.09 (or these reasons, this section stud-) 402.9 171.33 P
1.71 (ies the kinds of language f) 315 159.33 P
1.71 (acilities that are needed to) 428.73 159.33 P
1.43 (support each architectural domain, as well as the spe-) 315 147.33 P
1.88 (ci\336c features e) 315 135.33 P
1.88 (xisting ADLs emplo) 376.91 135.33 P
1.88 (y to that end. Our) 462.23 135.33 P
1 (hope is that this discussion will shed light on the rela-) 315 123.33 P
2.67 (tionships among dif) 315 111.33 P
2.67 (ferent architectural domains \050and) 399.54 111.33 P
0.77 (their resulting ADL features\051 and point out both where) 315 99.33 P
2.33 (the) 315 87.33 P
2.33 (y can be ef) 327.07 87.33 P
2.33 (fecti) 377.4 87.33 P
2.33 (v) 394.92 87.33 P
2.33 (ely combined and where we can) 399.77 87.33 P
(e) 315 75.33 T
(xpect dif) 319.29 75.33 T
(\336culties.) 354.31 75.33 T
70.56 152.75 298.44 331.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
131 286.17 128.35 286.17 131 295.39 133.64 286.17 4 Y
1 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
131 286.17 128.35 286.17 131 295.39 133.64 286.17 4 Y
V
131 285.67 131 185.97 2 L
2 Z
N
277.76 185.97 277.76 188.62 286.98 185.97 277.76 183.33 4 Y
0 Z
N
277.76 185.97 277.76 188.62 286.98 185.97 277.76 183.33 4 Y
V
131 185.97 277.26 185.97 2 L
2 Z
N
0 9 Q
(Architectural) 107.25 309.52 T
(V) 121.63 300.4 T
(ie) 127.59 300.4 T
(w) 133.86 300.4 T
(Le) 259.87 206.05 T
(v) 269.14 206.05 T
(el of) 273.5 206.05 T
(Abstraction) 253.81 196.92 T
128 202.27 133.18 202.27 2 L
0.5 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
128.41 214.37 133.58 214.37 2 L
N
128 240.23 133.18 240.23 2 L
N
128 227.3 133.18 227.3 2 L
N
0 8 Q
(te) 104.17 199.45 T
(xtual) 109.82 199.45 T
(graphical) 96.06 211.54 T
(data \337o) 96.47 224.48 T
(w) 120.05 224.48 T
(control \337o) 87.14 237.41 T
(w) 120.05 237.41 T
(process) 101.83 250.35 T
(implementation) 75.6 263.28 T
128 253.17 133.18 253.17 2 L
N
128 266.1 133.18 266.1 2 L
N
182.54 188.56 182.54 183.39 2 L
N
224.52 188.56 224.52 183.39 2 L
N
255.39 188.56 255.39 183.39 2 L
N
(source) 244.95 176.11 T
(code) 247.84 168.35 T
(detailed) 211.66 175.33 T
(architecture) 205.44 167.57 T
(high le) 166.81 175.33 T
(v) 188.61 175.33 T
(el) 192.49 175.33 T
(architecture) 163.66 167.57 T
198.41 183.59 213.94 191.35 R
7 X
V
N
0 14 Q
0 X
(...) 200.4 186.23 T
133.58 188.56 133.58 183.39 2 L
N
0 8 Q
(requirements) 116.37 175.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
J
182.73 185.97 182.73 214.43 131 214.43 3 L
J
182.73 185.97 182.73 187.72 2 L
N
[3.065 3.94] 3.065 I
182.73 187.72 182.73 212.68 2 L
N
J
182.73 212.68 182.73 214.43 180.98 214.43 3 L
N
[3.216 4.135] 3.216 I
180.98 214.43 132.75 214.43 2 L
N
J
132.75 214.43 131 214.43 2 L
N
J
180.15 211.84 185.32 217.02 R
V
7 X
N
0 X
(dominant) 182.49 227.28 T
(cross-section) 176.71 219.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(7) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(4.1. Repr) 72 712.67 T
(esentation) 114.88 712.67 T
0 10 Q
0.77 (Ideally) 72 691.76 P
0.77 (, an ADL should mak) 99.12 691.76 P
0.77 (e the structure of a system) 188.47 691.76 P
0.05 (clear from a con\336guration speci\336cation alone, i.e., with-) 72 679.76 P
0.23 (out ha) 72 667.76 P
0.23 (ving to study component and connector speci\336ca-) 96.75 667.76 P
0.92 (tions. Architecture descriptions in) 72 655.76 P
2 F
0.92 (in-line con\336gur) 213.73 655.76 P
0.92 (ation) 276.44 655.76 P
1.18 (ADLs) 72 643.76 P
0 F
1.18 (, such as Darwin, MetaH, and Rapide tend to be) 94.78 643.76 P
1.01 (encumbered with connector details, while) 72 631.76 P
2 F
1.01 (e) 246.48 631.76 P
1.01 (xplicit con-) 250.72 631.76 P
2.06 (\336gur) 72 619.76 P
2.06 (ation ADLs) 90.74 619.76 P
0 F
2.06 (, such as A) 138.64 619.76 P
2.06 (CME, Aesop, C2, SADL,) 188.31 619.76 P
0.44 (UniCon, and Wright ha) 72 607.76 P
0.44 (v) 167 607.76 P
0.44 (e the best potential to f) 171.85 607.76 P
0.44 (acilitate) 265.34 607.76 P
(understandability of architectural structure.) 72 595.76 T
1.06 (One common w) 72 574.19 P
1.06 (ay of f) 137.89 574.19 P
1.06 (acilitating understandability and) 166.01 574.19 P
0.74 (communication is by pro) 72 562.19 P
0.74 (viding a graphical notation, in) 173.78 562.19 P
-0.21 (addition to the te) 72 550.19 P
-0.21 (xtual notation. Ho) 138.73 550.19 P
-0.21 (we) 210.57 550.19 P
-0.21 (v) 221.98 550.19 P
-0.21 (er) 226.83 550.19 P
-0.21 (, this is only the) 234.2 550.19 P
0.66 (case if there is a precise relationship between a graphi-) 72 538.19 P
0.66 (cal description and the underlying semantic model. F) 72 526.19 P
0.66 (or) 288.67 526.19 P
0.38 (e) 72 514.19 P
0.38 (xample, Aesop, C2, Darwin, MetaH, Rapide, and Uni-) 76.29 514.19 P
0.65 (Con support such \322semantically sound\323 graphical nota-) 72 502.19 P
(tions, while A) 72 490.19 T
(CME, SADL, and Wright do not.) 127.99 490.19 T
0.53 (ADLs must also be able to model the architecture from) 72 468.62 P
4.84 (multiple perspecti) 72 456.62 P
4.84 (v) 148.53 456.62 P
4.84 (es. As discussed abo) 153.38 456.62 P
4.84 (v) 249.95 456.62 P
4.84 (e, se) 254.8 456.62 P
4.84 (v) 277.16 456.62 P
4.84 (eral) 282.01 456.62 P
0.15 (ADLs support at least tw) 72 444.62 P
0.15 (o vie) 172.5 444.62 P
0.15 (ws of an architecture: te) 192.13 444.62 P
0.15 (x-) 288.67 444.62 P
0.03 (tual and graphical. Each of these ADLs also allo) 72 432.62 P
0.03 (ws both) 265.58 432.62 P
3.03 (top-le) 72 420.62 P
3.03 (v) 95.08 420.62 P
3.03 (el and detailed vie) 99.93 420.62 P
3.03 (ws of composite elements.) 181.81 420.62 P
0.05 (Aesop, MetaH, and UniCon further distinguish dif) 72 408.62 P
0.05 (ferent) 273.68 408.62 P
(types of components and connectors iconically) 72 396.62 T
(.) 258.82 396.62 T
0.1 (Support for other vie) 72 375.05 P
0.1 (ws is sparse. C2 pro) 155.64 375.05 P
0.1 (vides a vie) 236.14 375.05 P
0.1 (w of) 278.85 375.05 P
1.06 (the de) 72 363.05 P
1.06 (v) 96.97 363.05 P
1.06 (elopment process that corresponds to the archi-) 101.82 363.05 P
0.37 (tecture [RR96]. Darwin\325) 72 351.05 P
0.37 (s) 170.22 351.05 P
2 F
0.37 (Softwar) 176.99 351.05 P
0.37 (e Ar) 207.74 351.05 P
0.37 (c) 224.68 351.05 P
0.37 (hitect\325) 228.97 351.05 P
0.37 (s Assistant) 254.12 351.05 P
0 F
0.98 ([NKM96] pro) 72 339.05 P
0.98 (vides a hierarchical vie) 128.65 339.05 P
0.98 (w of the architec-) 223.81 339.05 P
3.23 (ture which sho) 72 327.05 P
3.23 (ws all the component types and the) 137.09 327.05 P
0.88 (\322include\323 relationships among them in a tree structure.) 72 315.05 P
1.12 (Rapide allo) 72 303.05 P
1.12 (ws visualization of an architecture\325) 118.7 303.05 P
1.12 (s e) 263.14 303.05 P
1.12 (x) 274.94 303.05 P
1.12 (ecu-) 279.79 303.05 P
1.13 (tion beha) 72 291.05 P
1.13 (vior by b) 109.87 291.05 P
1.13 (uilding its simulation and animating) 148.03 291.05 P
1.51 (its e) 72 279.05 P
1.51 (x) 89.75 279.05 P
1.51 (ecution. Rapide also pro) 94.6 279.05 P
1.51 (vides a tool for vie) 196.21 279.05 P
1.51 (wing) 277 279.05 P
(and \336ltering e) 72 267.05 T
(v) 127.3 267.05 T
(ents generated by the simulation.) 132.15 267.05 T
1 11 Q
(4.2. Design Pr) 72 237.81 T
(ocess Support) 137.19 237.81 T
0 10 Q
0.34 (As the abo) 72 216.91 P
0.34 (v) 115.29 216.91 P
0.34 (e e) 120.14 216.91 P
0.34 (xamples of C2\325) 131.71 216.91 P
0.34 (s, Darwin\325) 193.5 216.91 P
0.34 (s, and Rapide\325) 235.49 216.91 P
0.34 (s) 293.11 216.91 P
0.39 (support tools indicate, language features can only go so) 72 204.91 P
0.12 (f) 72 192.91 P
0.12 (ar in supporting softw) 75.23 192.91 P
0.12 (are architects. Adequate tools are) 163.53 192.91 P
0.55 (also needed. A cate) 72 180.91 P
0.55 (gory of tools that is critical for ade-) 151.24 180.91 P
0.28 (quately supporting the design process are) 72 168.91 P
2 F
0.28 (active speci\336-) 241.46 168.91 P
0.6 (cation tools) 72 156.91 P
0 F
0.6 (; the) 119.55 156.91 P
0.6 (y can signi\336cantly reduce the cogniti) 137.49 156.91 P
0.6 (v) 287.71 156.91 P
0.6 (e) 292.56 156.91 P
(load on architects.) 72 144.91 T
2.61 (Only a handful of e) 72 123.33 P
2.61 (xisting ADLs pro) 160.04 123.33 P
2.61 (vide tools that) 235.11 123.33 P
1.7 (acti) 72 111.33 P
1.7 (v) 86.19 111.33 P
1.7 (ely support speci\336cation of architectures. In gen-) 91.04 111.33 P
1.15 (eral, such tools can be proacti) 72 99.33 P
1.15 (v) 196.35 99.33 P
1.15 (e or reacti) 201.2 99.33 P
1.15 (v) 243.22 99.33 P
1.15 (e. UniCon\325) 248.07 99.33 P
1.15 (s) 293.11 99.33 P
1.51 (graphical editor is proacti) 72 87.33 P
1.51 (v) 178.76 87.33 P
1.51 (e. It in) 183.61 87.33 P
1.51 (v) 212.06 87.33 P
1.51 (ok) 216.86 87.33 P
1.51 (es UniCon\325) 226.76 87.33 P
1.51 (s lan-) 273.55 87.33 P
3.72 (guage processing f) 72 75.33 P
3.72 (acilities to) 154.32 75.33 P
2 F
3.72 (pr) 205.66 75.33 P
3.72 (e) 214.18 75.33 P
3.72 (vent) 218.47 75.33 P
0 F
3.72 ( errors during) 235.13 75.33 P
4.9 (design. Reacti) 315 713.33 P
4.9 (v) 376.31 713.33 P
4.9 (e speci\336cation tools detect) 381.16 713.33 P
2 F
4.9 (e) 509.09 713.33 P
4.9 (xisting) 513.33 713.33 P
0 F
0.45 (errors. The) 315 701.33 P
0.45 (y may either only inform the architect of the) 359.17 701.33 P
-0.2 (error \050) 315 689.33 P
2 F
-0.2 (non-intrusive) 340.06 689.33 P
0 F
-0.2 (\051 or also force the architect to correct) 393.39 689.33 P
2.85 (it before mo) 315 677.33 P
2.85 (ving on \050) 369.44 677.33 P
2 F
2.85 (intrusive) 411.26 677.33 P
0 F
2.85 (\051. An e) 446.26 677.33 P
2.85 (xample of the) 479.3 677.33 P
5.78 (former is C2\325) 315 665.33 P
5.78 (s design en) 379.89 665.33 P
5.78 (vironment,) 435.48 665.33 P
2 F
5.78 (Ar) 487.37 665.33 P
5.78 (go) 497 665.33 P
0 F
5.78 (, while) 507 665.33 P
(MetaH\325) 315 653.33 T
(s graphical editor is an e) 345.55 653.33 T
(xample of the latter) 442.88 653.33 T
(.) 520.37 653.33 T
1 11 Q
(4.3. Analysis) 315 623.52 T
0 10 Q
0.73 (The types of analyses for which an ADL is well suited) 315 602.05 P
-0.18 (depend on its underlying semantic model, and to a lesser) 315 590.05 P
2.16 (e) 315 578.05 P
2.16 (xtent, its speci\336cation features. The semantic model) 319.29 578.05 P
0.17 (will lar) 315 566.05 P
0.17 (gely in\337uence whether the ADL can be analyzed) 343.6 566.05 P
0.34 (statically or dynamically) 315 554.05 P
0.34 (, or both. F) 413.9 554.05 P
0.34 (or e) 458.94 554.05 P
0.34 (xample, Wright,) 474.39 554.05 P
0.84 (which is based on communicating sequential processes) 315 542.05 P
0.67 (\050CSP\051 [Hoa85], allo) 315 530.05 P
0.67 (ws static deadlock analysis of indi-) 396.37 530.05 P
0.08 (vidual connectors and components attached to them. On) 315 518.05 P
-0.03 (the other hand, Rapide architectures, which are modeled) 315 506.05 P
0.04 (with partially ordered e) 315 494.05 P
0.04 (v) 408.45 494.05 P
0.04 (ent sets \050posets\051 [L) 413.3 494.05 P
0.04 (VB+93], can) 488.22 494.05 P
(be analyzed dynamically) 315 482.05 T
(.) 413.77 482.05 T
1 F
(4.3.1. Static Analysis) 315 453.9 T
0 F
0.71 (The most common type of static analysis tools are lan-) 315 433.76 P
1.2 (guage parsers and compilers. P) 315 421.76 P
1.2 (arsers analyze architec-) 443.77 421.76 P
-0.13 (tures for syntactic correctness, while compilers establish) 315 409.76 P
1.48 (semantic correctness. All e) 315 397.76 P
1.48 (xisting ADLs ha) 427.04 397.76 P
1.48 (v) 495.91 397.76 P
1.48 (e parsers.) 500.76 397.76 P
0.29 (Darwin, MetaH, Rapide, and UniCon also ha) 315 385.76 P
0.29 (v) 496.81 385.76 P
0.29 (e compil-) 501.66 385.76 P
1.64 (ers, which enable these languages to generate e) 315 373.76 P
1.64 (x) 515.16 373.76 P
1.64 (ecut-) 520.01 373.76 P
3.12 (able systems from architectural descriptions. Wright) 315 361.76 P
1.61 (does not ha) 315 349.76 P
1.61 (v) 363.57 349.76 P
1.61 (e a compiler) 368.42 349.76 P
1.61 (, b) 420.68 349.76 P
1.61 (ut it uses FDR [F) 432.09 349.76 P
1.61 (or92], a) 507.29 349.76 P
(model check) 315 337.76 T
(er) 365.72 337.76 T
(, to establish type conformance.) 373.09 337.76 T
0.14 (There are numerous other possible types of static analy-) 315 315.62 P
1.46 (sis of architectures. Se) 315 303.62 P
1.46 (v) 409.1 303.62 P
1.46 (eral e) 413.95 303.62 P
1.46 (xamples are pro) 437.19 303.62 P
1.46 (vided by) 503.82 303.62 P
-0.19 (current ADLs. Aesop pro) 315 291.62 P
-0.19 (vides f) 415.91 291.62 P
-0.19 (acilities for checking for) 442.55 291.62 P
-0.25 (type consistenc) 315 279.62 P
-0.25 (y) 375.98 279.62 P
-0.25 (, c) 380.33 279.62 P
-0.25 (ycles, resource con\337icts, and schedul-) 389.37 279.62 P
2.54 (ing feasibility in its architectures. C2 uses critics to) 315 267.62 P
0.24 (establish adherence to style rules and design guidelines.) 315 255.62 P
0.56 (MetaH and UniCon both currently support schedulabil-) 315 243.62 P
3.34 (ity analysis by specifying non-functional properties,) 315 231.62 P
0.44 (such as criticality and priority) 315 219.62 P
0.44 (. Finally) 435.52 219.62 P
0.44 (, gi) 468.65 219.62 P
0.44 (v) 481.62 219.62 P
0.44 (en tw) 486.47 219.62 P
0.44 (o archi-) 508.74 219.62 P
1.42 (tectures, SADL can establish their relati) 315 207.62 P
1.42 (v) 481.81 207.62 P
1.42 (e correctness) 486.66 207.62 P
(with respect to a re\336nement map.) 315 195.62 T
1 F
(4.3.2. Dynamic Analysis) 315 167.48 T
0 F
4.08 (The ability to analyze an architecture dynamically) 315 147.33 P
3.17 (directly depends on the ADL) 315 135.33 P
3.17 (\325) 442.86 135.33 P
3.17 (s ability to model its) 445.64 135.33 P
0 (dynamic beha) 315 123.33 P
0 (vior) 370.62 123.33 P
0 (. T) 386.18 123.33 P
0 (o this end, ADLs can emplo) 396.49 123.33 P
0 (y speci-) 508.62 123.33 P
1.33 (\336cation mechanisms, such as e) 315 111.33 P
1.33 (v) 443.11 111.33 P
1.33 (ent posets, CHAM, or) 447.96 111.33 P
-0.21 (temporal logic, which can e) 315 99.33 P
-0.21 (xpress dynamic properties of) 424.82 99.33 P
4.77 (a system. Another aspect of dynamic analysis is) 315 87.33 P
(enforcement of constraints at runtime.) 315 75.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(8) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.24 (Most e) 72 713.33 P
2.24 (xisting ADLs tend to vie) 101.59 713.33 P
2.24 (w architectures stati-) 209.2 713.33 P
0.4 (cally) 72 701.33 P
0.4 (, so that current support for dynamic modeling and) 90.79 701.33 P
0.88 (analysis is scarce. Darwin enables dynamic analysis of) 72 689.33 P
2.62 (architectures by instantiating parameters and compo-) 72 677.33 P
2.28 (nents to enact \322what if\323 scenarios. Similarly) 72 665.33 P
2.28 (, Rapide) 261.39 665.33 P
2 F
1.3 (P) 72 653.33 P
1.3 (oset Br) 77.31 653.33 P
1.3 (owser) 106.77 653.33 P
0 F
1.3 (\325) 130.66 653.33 P
1.3 (s e) 133.44 653.33 P
1.3 (v) 145.31 653.33 P
1.3 (ent \336ltering features and) 150.16 653.33 P
2 F
1.3 (Animation) 255.33 653.33 P
0.17 (T) 72 641.33 P
0.17 (ools) 76.64 641.33 P
0 F
0.17 ( f) 93.31 641.33 P
0.17 (acilitate analysis of architectures through simula-) 99.21 641.33 P
-0.25 (tion. Rapide\325) 72 629.33 P
-0.25 (s) 123.42 629.33 P
2 F
-0.25 (Constr) 129.56 629.33 P
-0.25 (aint Chec) 156.64 629.33 P
-0.25 (k) 194.8 629.33 P
-0.25 (er) 199.14 629.33 P
0 F
-0.25 ( also analyzes the con-) 207.47 629.33 P
5.68 (formance of a Rapide simulation to the formal) 72 617.33 P
1.04 (constraints de\336ned in the architecture. Finally) 72 605.33 P
1.04 (, runtime) 259.85 605.33 P
0.15 (systems of those ADLs that pro) 72 593.33 P
0.15 (vide architecture compi-) 198.96 593.33 P
0.19 (lation support can be vie) 72 581.33 P
0.19 (wed as dynamic analysis f) 170.82 581.33 P
0.19 (acili-) 276.45 581.33 P
(ties.) 72 569.33 T
1 11 Q
(4.4. Ev) 72 541.09 T
(olution) 103.98 541.09 T
0 10 Q
(An architecture can e) 72 521.19 T
(v) 156.99 521.19 T
(olv) 161.79 521.19 T
(e in tw) 174.42 521.19 T
(o dif) 201.54 521.19 T
(ferent dimensions:) 219.9 521.19 T
3 11 Q
(\245) 72 508.61 T
0 10 Q
1.79 (e) 81 508.61 P
1.79 (v) 85.19 508.61 P
1.79 (olution of indi) 89.99 508.61 P
1.79 (vidual components and connectors,) 150.55 508.61 P
0.34 (where the structure of the architecture is not af) 81 496.61 P
0.34 (fected,) 270.07 496.61 P
(although its beha) 81 484.61 T
(vior may be; and) 149.13 484.61 T
3 11 Q
(\245) 72 472.04 T
0 10 Q
-0.07 (e) 81 472.04 P
-0.07 (v) 85.19 472.04 P
-0.07 (olution of the entire architecture, which af) 89.99 472.04 P
-0.07 (fects both) 257.91 472.04 P
(the structure and beha) 81 460.04 T
(vior of an architecture.) 168.83 460.04 T
1.98 (Ev) 72 439.47 P
1.98 (olution in these tw) 82.91 439.47 P
1.98 (o dimensions can occur both at) 162.93 439.47 P
1.77 (architecture speci\336cation time and while the architec-) 72 427.47 P
(ture is e) 72 415.47 T
(x) 103.51 415.47 T
(ecuting.) 108.36 415.47 T
0 8 Q
(3) 140.3 419.47 T
1 10 Q
(4.4.1. Speci\336cation-T) 72 388.89 T
(ime Ev) 161.27 388.89 T
(olution) 190.89 388.89 T
0 F
0.91 (ADLs can support speci\336cation-time e) 72 370.32 P
0.91 (v) 229.82 370.32 P
0.91 (olution of indi-) 234.62 370.32 P
-0.14 (vidual components and connectors with subtyping. Only) 72 358.32 P
1.41 (a subset of e) 72 346.32 P
1.41 (xisting ADLs pro) 125.78 346.32 P
1.41 (vide such f) 198.45 346.32 P
1.41 (acilities, and) 245.04 346.32 P
1.15 (e) 72 334.32 P
1.15 (v) 76.19 334.32 P
1.15 (en their e) 81.04 334.32 P
1.15 (v) 120.3 334.32 P
1.15 (olution support is limited and often relies) 125.1 334.32 P
0.01 (on the chosen implementation \050programming\051 language.) 72 322.32 P
1.84 (The remainder of the ADLs vie) 72 310.32 P
1.84 (w and model compo-) 206.76 310.32 P
(nents and connectors as inherently static.) 72 298.32 T
0.92 (Aesop supports beha) 72 277.75 P
0.92 (vior) 156.96 277.75 P
0.92 (-preserving subtyping of com-) 172.87 277.75 P
1.65 (ponents and connectors to create substyles of a gi) 72 265.75 P
1.65 (v) 282.71 265.75 P
1.65 (en) 287.56 265.75 P
1.25 (architectural style. Rapide allo) 72 253.75 P
1.25 (ws its interf) 197.69 253.75 P
1.25 (ace types to) 247.3 253.75 P
0.04 (inherit from other types by using OO methods, resulting) 72 241.75 P
1.04 (in structural subtyping. A) 72 229.75 P
1.04 (CME also supports structural) 176.94 229.75 P
1.61 (subtyping via its) 72 217.75 P
2 F
1.61 (e) 145.45 217.75 P
1.61 (xtends) 149.69 217.75 P
0 F
1.61 ( feature. C2 pro) 175.24 217.75 P
1.61 (vides a more) 242.68 217.75 P
1 (sophisticated subtyping and type checking mechanism.) 72 205.75 P
-0.05 (Multiple subtyping relationships among components are) 72 193.75 P
0.53 (allo) 72 181.75 P
0.53 (wed: name, interf) 86.75 181.75 P
0.53 (ace, beha) 157.97 181.75 P
0.53 (vior) 195.51 181.75 P
0.53 (, and implementation) 211.22 181.75 P
(subtyping, as well as their combinations [MOR) 72 169.75 T
(T96].) 260.56 169.75 T
2.07 (Speci\336cation-time e) 72 149.18 P
2.07 (v) 154.09 149.18 P
2.07 (olution of complete architectures) 158.88 149.18 P
-0.19 (has tw) 72 137.18 P
-0.19 (o f) 97.54 137.18 P
-0.19 (acets: support for incremental de) 108.09 137.18 P
-0.19 (v) 238.18 137.18 P
-0.19 (elopment and) 243.03 137.18 P
0.58 (support for system f) 72 125.18 P
0.58 (amilies. Incrementality of an archi-) 153.9 125.18 P
72 101 297 121.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
78.57 110.08 180.71 110.08 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.81 (3. Saying that an architecture is \322e) 72 95 P
0.81 (x) 200.47 95 P
0.81 (ecuting\323 can mean either) 204.84 95 P
0.73 (that the architecture is being simulated or that the e) 72 86 P
0.73 (x) 262.65 86 P
0.73 (ecutable) 267.01 86 P
(system b) 72 77 T
(uilt based on that architecture is running.) 103.57 77 T
0 10 Q
1.18 (tecture can be vie) 315 713.33 P
1.18 (wed from tw) 388.55 713.33 P
1.18 (o dif) 441.92 713.33 P
1.18 (ferent perspecti) 461.47 713.33 P
1.18 (v) 524.32 713.33 P
1.18 (es.) 529.17 713.33 P
0.31 (One is its ability to accommodate addition of ne) 315 701.33 P
0.31 (w com-) 509.42 701.33 P
0.63 (ponents to the architecture. In general,) 315 689.33 P
2 F
0.63 (e) 474.86 689.33 P
0.63 (xplicit con\336gu-) 479.1 689.33 P
0 (r) 315 677.33 P
0 (ation ADLs) 318.74 677.33 P
0 F
0 ( can support incremental de) 364.58 677.33 P
0 (v) 474.88 677.33 P
0 (elopment more) 479.73 677.33 P
1.25 (easily and ef) 315 665.33 P
1.25 (fecti) 367.79 665.33 P
1.25 (v) 385.31 665.33 P
1.25 (ely than) 390.16 665.33 P
2 F
1.25 (in-line con\336gur) 427.09 665.33 P
1.25 (ation ADLs) 490.13 665.33 P
0 F
1.25 (;) 537.22 665.33 P
2.18 (ADLs that allo) 315 653.33 P
2.18 (w v) 378.55 653.33 P
2.18 (ariable numbers of components to) 395.2 653.33 P
1.95 (communicate through a connector are well suited for) 315 641.33 P
0.89 (incremental de) 315 629.33 P
0.89 (v) 374.79 629.33 P
0.89 (elopment, particularly when f) 379.64 629.33 P
0.89 (aced with) 500.51 629.33 P
(unplanned architectural changes) 315 617.33 T
([Med97].) 446.35 617.33 T
0.36 (Another vie) 315 595.67 P
0.36 (w of incrementality is an ADL) 362.6 595.67 P
0.36 (\325) 485.95 595.67 P
0.36 (s support for) 488.73 595.67 P
0.36 (incomplete architectural descriptions. Incomplete archi-) 315 583.67 P
1.12 (tectures are common during design, as some decisions) 315 571.67 P
1.47 (are deferred and others ha) 315 559.67 P
1.47 (v) 424.52 559.67 P
1.47 (e not yet become rele) 429.37 559.67 P
1.47 (v) 520.53 559.67 P
1.47 (ant.) 525.28 559.67 P
3.49 (Ho) 315 547.67 P
3.49 (we) 326.97 547.67 P
3.49 (v) 338.38 547.67 P
3.49 (er) 343.23 547.67 P
3.49 (, most e) 350.6 547.67 P
3.49 (xisting ADLs and their supporting) 388.82 547.67 P
0.4 (toolsets ha) 315 535.67 P
0.4 (v) 357.7 535.67 P
0.4 (e been b) 362.55 535.67 P
0.4 (uilt to pre) 396.47 535.67 P
0.4 (v) 435.91 535.67 P
0.4 (ent precisely these kinds) 440.76 535.67 P
0.05 (of situations. F) 315 523.67 P
0.05 (or e) 374.67 523.67 P
0.05 (xample, Darwin, MetaH, Rapide, and) 389.84 523.67 P
3.3 (UniCon compilers, constraint check) 315 511.67 P
3.3 (ers, and runtime) 468.68 511.67 P
2.42 (systems ha) 315 499.67 P
2.42 (v) 360.83 499.67 P
2.42 (e been constructed to raise e) 365.68 499.67 P
2.42 (xceptions if) 490.64 499.67 P
2.53 (such situations arise. In this case, an ADL, such as) 315 487.67 P
0.32 (Wright, which focuses its analyses on information local) 315 475.67 P
1.6 (to a single connector is better suited to accommodate) 315 463.67 P
0.06 (e) 315 451.67 P
0.06 (xpansion of the architecture than, e.g., SADL, which is) 319.29 451.67 P
(v) 315 439.67 T
(ery rigorous in its re\336nement of) 319.85 439.67 T
2 F
(entir) 449.28 439.67 T
(e) 467.8 439.67 T
0 F
( architectures.) 472.24 439.67 T
2.28 (Still another aspect of static e) 315 418 P
2.28 (v) 444.19 418 P
2.28 (olution is support for) 448.99 418 P
2.4 (application f) 315 406 P
2.4 (amilies. In [MT96], we sho) 367.57 406 P
2.4 (wed that the) 486.33 406 P
0.75 (number of possible architectures in a component-based) 315 394 P
0.84 (style gro) 315 382 P
0.84 (ws e) 350.31 382 P
0.84 (xponentially as a result of a linear e) 369.05 382 P
0.84 (xpan-) 517.23 382 P
1.36 (sion of a collection of components. All such architec-) 315 370 P
4.09 (tures may not belong to the same logical f) 315 358 P
4.09 (amily) 515.37 358 P
4.09 (.) 537.5 358 P
0.33 (Therefore, relying on component and connector inherit-) 315 346 P
-0.13 (ance, subtyping, or other e) 315 334 P
-0.13 (v) 420.31 334 P
-0.13 (olution mechanisms is insuf-) 425.11 334 P
0.86 (\336cient. An ob) 315 322 P
0.86 (vious solution, currently adopted only by) 371.28 322 P
1.39 (A) 315 310 P
1.39 (CME, is to pro) 321.82 310 P
1.39 (vide a language construct that allo) 385.28 310 P
1.39 (ws) 528.89 310 P
1.63 (the architect to specify the f) 315 298 P
1.63 (amily to which the gi) 434.43 298 P
1.63 (v) 525.71 298 P
1.63 (en) 530.56 298 P
(architecture belongs.) 315 286 T
1 F
(4.4.2. Execution-T) 315 258.33 T
(ime Ev) 392.6 258.33 T
(olution) 422.22 258.33 T
0 F
-0.03 (There are presently tw) 315 238.67 P
-0.03 (o approaches to supporting e) 404.49 238.67 P
-0.03 (v) 519.09 238.67 P
-0.03 (olu-) 523.89 238.67 P
0.47 (tion of architectures at e) 315 226.67 P
0.47 (x) 413.37 226.67 P
0.47 (ecution time. The \336rst is what) 418.22 226.67 P
5.28 (Oreizy calls \322constrained dynamism\323: all runtime) 315 214.67 P
0.68 (changes to the architecture must be kno) 315 202.67 P
0.68 (wn a priori and) 477.14 202.67 P
(are speci\336ed as part of the architectural model [Ore96].) 315 190.67 T
3.77 (T) 315 169 P
3.77 (w) 320.31 169 P
3.77 (o e) 327.43 169 P
3.77 (xisting ADLs support constrained dynamism.) 342.99 169 P
3.13 (Rapide supports conditional con\336guration; its) 315 157 P
2 F
3.13 (wher) 515.93 157 P
3.13 (e) 535.56 157 P
0 F
0.94 (clause enables a form of architectural re) 315 145 P
0.94 (wiring at runt-) 480.35 145 P
0.45 (ime, using the) 315 133 P
2 F
0.45 (link) 375.24 133 P
0 F
0.45 ( and) 390.24 133 P
2 F
0.45 (unlink) 410.59 133 P
0 F
0.45 ( operators. Darwin allo) 435.59 133 P
0.45 (ws) 528.89 133 P
0.44 (runtime replication of components using the) 315 121 P
2 F
0.44 (dyn) 497.08 121 P
0 F
0.44 ( opera-) 511.52 121 P
(tor) 315 109 T
(.) 325.56 109 T
0.15 (The second approach to e) 315 87.33 P
0.15 (x) 417.65 87.33 P
0.15 (ecution time e) 422.5 87.33 P
0.15 (v) 479.22 87.33 P
0.15 (olution places) 484.02 87.33 P
1.16 (no restrictions at architecture speci\336cation time on the) 315 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(9) 303.5 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.74 (kinds of allo) 72 713.33 P
2.74 (wed changes. Instead, the ADL has an) 127.24 713.33 P
4.39 (architecture modi\336cation feature, which allo) 72 701.33 P
4.39 (ws the) 266.78 701.33 P
2.27 (architect to specify changes while the architecture is) 72 689.33 P
(running.) 72 677.33 T
1.82 (Darwin and C2 are the only ADLs that support such) 72 656.17 P
0.84 (\322pure dynamism\323 [Ore96]. Darwin allo) 72 644.17 P
0.84 (ws deletion and) 232.56 644.17 P
-0.04 (rebinding of components by interpreting Darwin scripts.) 72 632.17 P
1.16 (C2 speci\336es a set of operations for insertion, remo) 72 620.17 P
1.16 (v) 282.53 620.17 P
1.16 (al,) 287.28 620.17 P
1.29 (and re) 72 608.17 P
1.29 (wiring of elements in an architecture at runtime) 97.75 608.17 P
0.79 ([Med96]. C2\325) 72 596.17 P
0.79 (s) 127.23 596.17 P
2 F
0.79 (Ar) 134.41 596.17 P
0.79 (c) 144.04 596.17 P
0.79 (hShell) 148.33 596.17 P
0 F
0.79 ( tool enables arbitrary interac-) 173.33 596.17 P
1.99 (ti) 72 584.17 P
1.99 (v) 77.31 584.17 P
1.99 (e construction, e) 82.16 584.17 P
1.99 (x) 151.8 584.17 P
1.99 (ecution, and runtime-modi\336cation) 156.65 584.17 P
2.13 (of C2-style architectures by dynamically loading and) 72 572.17 P
-0.16 (linking ne) 72 560.17 P
-0.16 (w architectural elements [Ore96, MO) 111.87 560.17 P
-0.16 (T97]. An) 260.5 560.17 P
0.46 (issue that needs further e) 72 548.17 P
0.46 (xploration is constraining pure) 173.12 548.17 P
0.82 (dynamic e) 72 536.17 P
0.82 (v) 113.95 536.17 P
0.82 (olution to ensure that the desired properties) 118.75 536.17 P
(of architectures are maintained.) 72 524.17 T
1 11 Q
(4.5. Re\336nement) 72 495.33 T
0 10 Q
1.42 (ADLs pro) 72 474.83 P
1.42 (vide architects with e) 113.54 474.83 P
1.42 (xpressi) 202.91 474.83 P
1.42 (v) 230.99 474.83 P
1.42 (e and semanti-) 235.84 474.83 P
2.34 (cally elaborate f) 72 462.83 P
2.34 (acilities for speci\336cation of architec-) 141 462.83 P
1.39 (tures. Ho) 72 450.83 P
1.39 (we) 109.8 450.83 P
1.39 (v) 121.21 450.83 P
1.39 (er) 126.06 450.83 P
1.39 (, an ADL must also enable correct and) 133.43 450.83 P
2.06 (consistent re\336nement of architectures to subsequently) 72 438.83 P
1.48 (lo) 72 426.83 P
1.48 (wer le) 79.53 426.83 P
1.48 (v) 105.47 426.83 P
1.48 (els of abstraction, and, e) 110.32 426.83 P
1.48 (v) 213.2 426.83 P
1.48 (entually) 218.05 426.83 P
1.48 (, to e) 249.62 426.83 P
1.48 (x) 272.16 426.83 P
1.48 (ecut-) 277.01 426.83 P
(able systems.) 72 414.83 T
0.17 (An ob) 72 393.67 P
0.17 (vious w) 96.74 393.67 P
0.17 (ay in which ADLs can support re\336nement) 128.21 393.67 P
0.51 (is by pro) 72 381.67 P
0.51 (viding patterns, or maps, that, when applied to) 107.88 381.67 P
0.04 (an architecture, result in a related architecture at a lo) 72 369.67 P
0.04 (wer) 282.01 369.67 P
0.31 (le) 72 357.67 P
0.31 (v) 78.97 357.67 P
0.31 (el of abstraction. SADL and Rapide are the only tw) 83.82 357.67 P
0.31 (o) 292 357.67 P
1.51 (ADLs that pro) 72 345.67 P
1.51 (vide such support. SADL uses maps to) 132.65 345.67 P
2.9 (enable correct architecture re\336nements across styles,) 72 333.67 P
4.14 (while Rapide generates comparati) 72 321.67 P
4.14 (v) 219.98 321.67 P
4.14 (e simulations of) 224.83 321.67 P
6.25 (architectures at dif) 72 309.67 P
6.25 (ferent abstraction le) 158.67 309.67 P
6.25 (v) 250.34 309.67 P
6.25 (els. Both) 255.19 309.67 P
2.45 (approaches ha) 72 297.67 P
2.45 (v) 131.18 297.67 P
2.45 (e certain dra) 136.02 297.67 P
2.45 (wbacks, indicating that a) 190.21 297.67 P
(h) 72 285.67 T
(ybrid approach may be useful.) 76.95 285.67 T
-0.18 (Garlan has recently ar) 72 264.5 P
-0.18 (gued that re\336nement should not be) 159.3 264.5 P
0.58 (consistent with respect to a single \050immutable\051 la) 72 252.5 P
0.58 (w) 272.27 252.5 P
0.58 (, b) 278.84 252.5 P
0.58 (ut) 289.22 252.5 P
-0.03 (rather with respect to particular properties of interest, be) 72 240.5 P
4.34 (the) 72 228.5 P
4.34 (y conserv) 84.07 228.5 P
4.34 (ati) 126.76 228.5 P
4.34 (v) 136.51 228.5 P
4.34 (e e) 141.36 228.5 P
4.34 (xtension \050SADL\051, computational) 156.93 228.5 P
0.36 (beha) 72 216.5 P
0.36 (vior \050Rapide\051, or something entirely dif) 90.68 216.5 P
0.36 (ferent, such) 249.99 216.5 P
1.64 (as performance [Gar96]. This may be a good starting) 72 204.5 P
5.59 (point to) 72 192.5 P
5.59 (w) 108.18 192.5 P
5.59 (ards a successful marriage of the tw) 115.3 192.5 P
5.59 (o) 292 192.5 P
(approaches.) 72 180.5 T
1.19 (Se) 72 159.33 P
1.19 (v) 81.75 159.33 P
1.19 (eral ADLs tak) 86.6 159.33 P
1.19 (e a dif) 145.52 159.33 P
1.19 (ferent approach to re\336nement:) 172.64 159.33 P
1.93 (the) 72 147.33 P
1.93 (y enable generation of e) 84.07 147.33 P
1.93 (x) 187.74 147.33 P
1.93 (ecutable systems directly) 192.59 147.33 P
0.05 (from architectural speci\336cations. These are typically the) 72 135.33 P
2 F
0.41 (implementation constr) 72 123.33 P
0.41 (aining langua) 161.98 123.33 P
0.41 (g) 218.12 123.33 P
0.41 (es) 223.02 123.33 P
0 F
0.41 (, such as MetaH) 231.35 123.33 P
2.07 (and UniCon. These ADLs assume the e) 72 111.33 P
2.07 (xistence of a) 242.32 111.33 P
0.47 (source \336le that corresponds to a gi) 72 99.33 P
0.47 (v) 211.79 99.33 P
0.47 (en architectural ele-) 216.64 99.33 P
-0.09 (ment. This approach mak) 72 87.33 P
-0.09 (es the assumption that the rela-) 173.29 87.33 P
8.73 (tionship between elements of an architectural) 72 75.33 P
0.65 (description and those of the resulting system will be 1-) 315 713.33 P
1.57 (to-1. Gi) 315 701.33 P
1.57 (v) 347.43 701.33 P
1.57 (en that architectures are intended to describe) 352.28 701.33 P
0.02 (systems at a higher le) 315 689.33 P
0.02 (v) 400.92 689.33 P
0.02 (el of abstraction than source code) 405.77 689.33 P
0.74 (modules, this can be considered only a limited form of) 315 677.33 P
(re\336nement.) 315 665.33 T
1 11 Q
(4.6. T) 315 637.09 T
(raceability) 340.77 637.09 T
0 10 Q
2.78 (While the problem of re\336nement essentially focuses) 315 617.19 P
1.36 (only on one axis of Figure) 315 605.19 P
1.36 (2 \050the horizontal axis\051 and) 429.58 605.19 P
2.12 (one direction \050left to right\051, traceability may need to) 315 593.19 P
0.7 (co) 315 581.19 P
0.7 (v) 324.29 581.19 P
0.7 (er a lar) 329.14 581.19 P
0.7 (ge portion of the tw) 358.13 581.19 P
0.7 (o-dimensional space and) 439.72 581.19 P
1.57 (is applicable in both directions. This presents a much) 315 569.19 P
1.12 (more dif) 315 557.19 P
1.12 (\336cult task, indicating wh) 350.03 557.19 P
1.12 (y this is the architec-) 452.21 557.19 P
(tural domain in which e) 315 545.19 T
(xisting ADLs are most lacking.) 409.84 545.19 T
2.48 (The relationships among architectural vie) 315 524.62 P
2.48 (ws \050v) 490.74 524.62 P
2.48 (ertical) 515.01 524.62 P
3.05 (axis\051 are not al) 315 512.62 P
3.05 (w) 383.21 512.62 P
3.05 (ays well understood. F) 390.33 512.62 P
3.05 (or e) 489.89 512.62 P
3.05 (xample,) 508.06 512.62 P
1.79 (ADLs commonly pro) 315 500.62 P
1.79 (vide support for tracing changes) 403.98 500.62 P
0.62 (between te) 315 488.62 P
0.62 (xtual and graphical vie) 358.51 488.62 P
0.62 (ws, such that changes) 451.49 488.62 P
2.4 (in one vie) 315 476.62 P
2.4 (w are automatically re\337ected in the other;) 358.98 476.62 P
1.49 (ho) 315 464.62 P
1.49 (we) 324.75 464.62 P
1.49 (v) 336.16 464.62 P
1.49 (er) 341.01 464.62 P
1.49 (, it may be less clear ho) 348.38 464.62 P
1.49 (w the data \337o) 451.22 464.62 P
1.49 (w vie) 509.6 464.62 P
1.49 (w) 532.78 464.62 P
0.99 (should af) 315 452.62 P
0.99 (fect the process vie) 352.67 452.62 P
0.99 (w) 432.3 452.62 P
0.99 (. In other cases, changes) 438.87 452.62 P
1.13 (in one vie) 315 440.62 P
1.13 (w \050e.g., process\051 should ne) 356.45 440.62 P
1.13 (v) 467.62 440.62 P
1.13 (er af) 472.48 440.62 P
1.13 (fect another) 491.39 440.62 P
0.73 (\050e.g., control \337o) 315 428.62 P
0.73 (w\051. An e) 380.37 428.62 P
0.73 (v) 416.29 428.62 P
0.73 (en bigger hurdle is pro) 421.14 428.62 P
0.73 (viding) 514.44 428.62 P
0.79 (traceability support across) 315 416.62 P
2 F
0.79 (both) 424.85 416.62 P
0 F
0.79 ( architectural vie) 442.63 416.62 P
0.79 (ws and) 511.16 416.62 P
1.95 (le) 315 404.62 P
1.95 (v) 321.97 404.62 P
1.95 (els of abstraction simultaneously) 326.82 404.62 P
1.95 (. Finally) 463.41 404.62 P
1.95 (, although) 498.05 404.62 P
1.4 (much research has been directed at methodologies for) 315 392.62 P
0.24 (making the transition from requirements to design \050e.g.,) 315 380.62 P
0.23 (OO\051, this process is still an art form. Further research is) 315 368.62 P
0.56 (especially needed to understand the ef) 315 356.62 P
0.56 (fects of changing) 470.01 356.62 P
(requirements on architectures and vice v) 315 344.62 T
(ersa.) 476.75 344.62 T
0.48 (T) 315 324.05 P
0.48 (raceability is particularly a problem in the w) 320.76 324.05 P
0.48 (ay imple-) 501.47 324.05 P
0.4 (mentation constraining languages approach code gener-) 315 312.05 P
-0.08 (ation, discussed in the pre) 315 300.05 P
-0.08 (vious subsection. These ADLs) 418.03 300.05 P
0.58 (pro) 315 288.05 P
0.58 (vide no means of guaranteeing that the source mod-) 328.18 288.05 P
3.25 (ules which are supposed to implement architectural) 315 276.05 P
1.46 (components will do so correctly) 315 264.05 P
1.46 (. Furthermore, e) 448.53 264.05 P
1.46 (v) 515.64 264.05 P
1.46 (en if) 520.49 264.05 P
1.49 (the speci\336ed modules currently implement the needed) 315 252.05 P
0.51 (beha) 315 240.05 P
0.51 (vior correctly) 333.68 240.05 P
0.51 (, there is no guarantee that an) 387.7 240.05 P
0.51 (y future) 508.11 240.05 P
2.13 (changes to those modules will be traced back to the) 315 228.05 P
(architecture and vice v) 315 216.05 T
(ersa.) 405.65 216.05 T
1 11 Q
(4.7. Simulation/Executability) 315 187.81 T
0 10 Q
0.19 (As with dynamic analysis \050Section) 315 167.91 P
0.19 (4.3.2\051, simulating an) 457.13 167.91 P
0.18 (architecture will directly depend upon the ADL) 315 155.91 P
0.18 (\325) 505.09 155.91 P
0.18 (s ability) 507.87 155.91 P
0.52 (to model its dynamic beha) 315 143.91 P
0.52 (vior) 422.45 143.91 P
0.52 (. Currently) 438.01 143.91 P
0.52 (, Rapide is the) 481.21 143.91 P
1.5 (only ADL that can simulate the architecture itself, by) 315 131.91 P
0.58 (generating e) 315 119.91 P
0.58 (v) 364.48 119.91 P
0.58 (ent posets. Other ADLs enable generation) 369.33 119.91 P
(of running systems corresponding to the architecture.) 315 107.91 T
4.31 (MetaH and UniCon require pree) 315 87.33 P
4.31 (xisting component) 461.52 87.33 P
0.48 (implementations in Ada and C, respecti) 315 75.33 P
0.48 (v) 475.48 75.33 P
0.48 (ely) 480.33 75.33 P
0.48 (, in order to) 491.9 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(10) 301 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (generate applications. Darwin can also construct e) 72 713.33 P
-0.08 (x) 272.16 713.33 P
-0.08 (ecut-) 277.01 713.33 P
0.23 (able systems in the same manner in C++, and Rapide in) 72 701.33 P
(C, C++, Ada, VHDL, or its e) 72 689.33 T
(x) 188.12 689.33 T
(ecutable sublanguage.) 192.97 689.33 T
1.48 (C2 and Aesop pro) 72 669.33 P
1.48 (vide class hierarchies for their con-) 148.79 669.33 P
1.26 (cepts and operations, such as components, connectors,) 72 657.33 P
3.56 (and interconnection and message passing protocols.) 72 645.33 P
1.74 (These hierarchies form a basis from which an imple-) 72 633.33 P
0.56 (mentation of an architecture may be produced. Aesop\325) 72 621.33 P
0.56 (s) 293.11 621.33 P
1.76 (hierarch) 72 609.33 P
1.76 (y has been implemented in C++, and C2\325) 104.71 609.33 P
1.76 (s in) 281.07 609.33 P
(C++, Ja) 72 597.33 T
(v) 103.08 597.33 T
(a, and Ada.) 107.83 597.33 T
1 11 Q
(4.8. Summary) 315 712.67 T
0 10 Q
1.33 (Existing ADLs span a broad spectrum in terms of the) 315 693.33 P
1.89 (architectural domains the) 315 681.33 P
1.89 (y support. On the one hand,) 419.72 681.33 P
2.08 (languages lik) 315 669.33 P
2.08 (e SADL and Wright ha) 370.03 669.33 P
2.08 (v) 470.89 669.33 P
2.08 (e v) 475.74 669.33 P
2.08 (ery speci\336c,) 489.6 669.33 P
0.29 (narro) 315 657.33 P
0.29 (w foci. On the other) 335.85 657.33 P
0.29 (, C2, Rapide, and Darwin sup-) 416.88 657.33 P
5.79 (port a number of architectural domains. Certain) 315 645.33 P
-0.01 (domains, e.g., e) 315 633.33 P
-0.01 (v) 377.5 633.33 P
-0.01 (olution, re\336nement, and traceability are) 382.3 633.33 P
0.79 (only sparsely supported, indicating areas around which) 315 621.33 P
0.47 (future w) 315 609.33 P
0.47 (ork should be centered. A more complete sum-) 348.97 609.33 P
(mary of this section is gi) 315 597.33 T
(v) 413.36 597.33 T
(en in T) 418.21 597.33 T
(able) 445.74 597.33 T
(1 belo) 464.9 597.33 T
(w) 489.37 597.33 T
(.) 495.94 597.33 T
1 9 Q
(T) 209.99 568 T
(able 1:) 215.16 568 T
(ADL Support f) 245.41 568 T
(or Ar) 303.19 568 T
(chitectural Domains) 324.27 568 T
71.64 530 102.24 556.88 R
5 X
V
103.36 530 156.64 556.88 R
V
1 8 Q
0 X
(Repr) 111.74 541.67 T
(esent.) 128.93 541.67 T
156.89 530 207.43 556.88 R
5 X
V
0 X
(Design) 170.6 549.67 T
(Pr) 169.35 541.67 T
(ocess) 177.64 541.67 T
(Support) 168.15 533.67 T
207.68 530 265.36 556.88 R
5 X
V
0 X
(Static) 226.74 545.67 T
(Analysis) 222.07 537.67 T
265.61 530 309.09 556.88 R
5 X
V
0 X
(Dynamic) 272.02 545.67 T
(Analysis) 272.9 537.67 T
309.34 530 355.89 556.88 R
5 X
V
0 X
(Spec-T) 314.47 545.67 T
(ime) 338.33 545.67 T
(Ev) 315.99 537.67 T
(olution) 325.24 537.67 T
356.14 530 402.69 556.88 R
5 X
V
0 X
(Exec-T) 361.05 545.67 T
(ime) 385.35 545.67 T
(Ev) 362.79 537.67 T
(olution) 372.04 537.67 T
402.94 530 447.83 556.88 R
5 X
V
0 X
(Re\336nement) 405.83 541.67 T
448.08 530 486.4 556.88 R
5 X
V
0 X
(T) 456.54 541.67 T
(race.) 461.28 541.67 T
486.65 530 540.36 556.88 R
5 X
V
0 X
(Simulation/) 493.72 545.67 T
(Executability) 490.84 537.67 T
71.64 501.12 102.24 528 R
5 X
V
0 X
(A) 75.38 513.67 T
(CME) 80.71 513.67 T
0 F
(e) 105.24 521.67 T
(xplicit con-) 108.67 521.67 T
(\336g.; \322weblets\323) 105.24 513.67 T
(none) 158.76 521.67 T
(parser) 209.55 521.67 T
(none) 267.48 521.67 T
(application) 311.22 521.67 T
(f) 311.22 513.67 T
(amilies) 313.8 513.67 T
(none) 358.02 521.67 T
(rep-maps) 404.82 521.67 T
(across le) 404.82 513.67 T
(v) 432.39 513.67 T
(els) 436.27 513.67 T
(te) 456.41 521.67 T
(xtual) 462.07 521.67 T
(<->) 461.39 513.67 T
(graphical) 452.35 505.67 T
(none) 488.52 521.67 T
71.64 441.12 102.24 500.88 R
5 X
V
1 F
0 X
(Aesop) 76.93 469.67 T
0 F
(e) 105.24 493.67 T
(xplicit con-) 108.67 493.67 T
(\336g.; graphical) 105.24 485.67 T
(notation; types) 105.24 477.67 T
(distinguished) 105.24 469.67 T
(iconically) 105.24 461.67 T
(syntax) 158.76 493.67 T
(directed edi-) 158.76 485.67 T
(tor; special-) 158.76 477.67 T
(ized editors) 158.76 469.67 T
(for visualiza-) 158.76 461.67 T
(tion classes) 158.76 453.67 T
(parser; style-) 209.55 493.67 T
(speci\336c com-) 209.55 485.67 T
(piler; type,) 209.55 477.67 T
(c) 209.55 469.67 T
(ycle, resource) 212.99 469.67 T
(con\337ict, and) 209.55 461.67 T
(scheduling fea-) 209.55 453.67 T
(sibility check) 209.55 445.67 T
(er) 252.36 445.67 T
(none) 267.48 493.67 T
(beha) 311.22 493.67 T
(vior) 326.16 493.67 T
(-) 338.89 493.67 T
(preserving) 311.22 485.67 T
(subtyping of) 311.22 477.67 T
(components) 311.22 469.67 T
(and connec-) 311.22 461.67 T
(tors) 311.22 453.67 T
(none) 358.02 493.67 T
(none) 404.82 493.67 T
(te) 456.41 493.67 T
(xtual) 462.07 493.67 T
(<->) 461.39 485.67 T
(graphical) 452.35 477.67 T
2 F
(b) 488.52 493.67 T
(uild) 492.36 493.67 T
0 F
( tool con-) 504.81 493.67 T
(structs system) 488.52 485.67 T
(glue code in C) 488.52 477.67 T
(for pipe-and-) 488.52 469.67 T
(\336lter style) 488.52 461.67 T
71.64 389.13 102.24 440.88 R
5 X
V
1 F
0 X
(C2) 82.49 413.67 T
0 F
(e) 105.24 433.67 T
(xplicit con-) 108.67 433.67 T
(\336g.; graphical) 105.24 425.67 T
(notation; pro-) 105.24 417.67 T
(cess vie) 105.24 409.67 T
(w; sim-) 130.14 409.67 T
(ulation; e) 105.24 401.67 T
(v) 135.04 401.67 T
(ent) 138.92 401.67 T
(\336ltering) 105.24 393.67 T
(non-intrusi) 158.76 433.67 T
(v) 193.67 433.67 T
(e,) 197.55 433.67 T
(reacti) 158.76 425.67 T
(v) 176.33 425.67 T
(e) 180.21 425.67 T
(design critics) 158.76 417.67 T
-0.18 (and to-do lists) 158.76 409.67 P
(in) 158.76 401.67 T
2 F
(Ar) 166.99 401.67 T
(go) 174.69 401.67 T
0 F
(parser; critics to) 209.55 433.67 T
(establish adher-) 209.55 425.67 T
(ence to style) 209.55 417.67 T
-0.02 (rules and design) 209.55 409.67 P
(heuristics) 209.55 401.67 T
(e) 267.48 433.67 T
(v) 270.84 433.67 T
(ent) 274.72 433.67 T
(\336ltering) 267.48 425.67 T
(multiple sub-) 311.22 433.67 T
(typing mech-) 311.22 425.67 T
(anisms;) 311.22 417.67 T
(allo) 311.22 409.67 T
(ws par-) 323.02 409.67 T
(tial architec-) 311.22 401.67 T
(tures) 311.22 393.67 T
(pure dyna-) 358.02 433.67 T
(mism: ele-) 358.02 425.67 T
(ment) 358.02 417.67 T
(insertion,) 358.02 409.67 T
(remo) 358.02 401.67 T
(v) 374.34 401.67 T
(al,) 378.14 401.67 T
(and re) 358.02 393.67 T
(wiring) 377.59 393.67 T
(none) 404.82 433.67 T
(te) 456.41 433.67 T
(xtual) 462.07 433.67 T
(<->) 461.39 425.67 T
(graphical) 452.35 417.67 T
(class frame-) 488.52 433.67 T
(w) 488.52 425.67 T
(ork enables) 494.22 425.67 T
(generation of) 488.52 417.67 T
(C/C++, Ada,) 488.52 409.67 T
(and Ja) 488.52 401.67 T
(v) 508.58 401.67 T
(a code) 512.38 401.67 T
71.64 321.13 102.24 388.88 R
5 X
V
1 F
0 X
(Darwin) 74.49 353.67 T
0 F
(implicit con-) 105.24 381.67 T
(\336g.; graphical) 105.24 373.67 T
(notation; hier-) 105.24 365.67 T
-1.01 (archical system) 105.24 357.67 P
(vie) 105.24 349.67 T
(w) 114.81 349.67 T
(automated) 158.76 381.67 T
(addition of) 158.76 373.67 T
(ports; propa-) 158.76 365.67 T
(g) 158.76 357.67 T
(ation of) 162.72 357.67 T
(changes) 158.76 349.67 T
(across bound) 158.76 341.67 T
(ports; prop-) 158.76 333.67 T
(erty dialogs) 158.76 325.67 T
(parser; compiler) 209.55 381.67 T
(\322what if\323) 267.48 381.67 T
-1.02 (scenarios by) 267.48 373.67 P
(instantiat-) 267.48 365.67 T
(ing parame-) 267.48 357.67 T
(ters and) 267.48 349.67 T
(dynamic) 267.48 341.67 T
(components) 267.48 333.67 T
(none) 311.22 381.67 T
(constrained) 358.02 381.67 T
(dynamism:) 358.02 373.67 T
(runtime rep-) 358.02 365.67 T
(lication of) 358.02 357.67 T
(components) 358.02 349.67 T
(and condi-) 358.02 341.67 T
-0.09 (tional con\336g-) 358.02 333.67 P
(uration) 358.02 325.67 T
(none) 404.82 381.67 T
(te) 456.41 381.67 T
(xtual) 462.07 381.67 T
(<->) 461.39 373.67 T
(graphical) 452.35 365.67 T
(compiler gen-) 488.52 381.67 T
(erates C++) 488.52 373.67 T
(code) 488.52 365.67 T
71.64 277.13 102.24 320.88 R
5 X
V
1 F
0 X
(MetaH) 75.38 297.67 T
0 F
(implicit con-) 105.24 313.67 T
(\336g.; graphical) 105.24 305.67 T
(notation; types) 105.24 297.67 T
(distinguished) 105.24 289.67 T
(iconically) 105.24 281.67 T
(intrusi) 158.76 313.67 T
(v) 179.01 313.67 T
(e,) 182.89 313.67 T
(reacti) 158.76 305.67 T
(v) 176.33 305.67 T
(e) 180.21 305.67 T
(graphical edi-) 158.76 297.67 T
(tor) 158.76 289.67 T
(parser; com-) 209.55 313.67 T
(piler; schedula-) 209.55 305.67 T
(bility) 209.55 297.67 T
(,) 225.93 297.67 T
(reliability) 209.55 289.67 T
(, and) 240.15 289.67 T
(security analysis) 209.55 281.67 T
(none) 267.48 313.67 T
(none) 311.22 313.67 T
(none) 358.02 313.67 T
(none) 404.82 313.67 T
(te) 456.41 313.67 T
(xtual) 462.07 313.67 T
(<->) 461.39 305.67 T
(graphical) 452.35 297.67 T
(compiler) 488.52 313.67 T
(generates Ada) 488.52 305.67 T
(code \050C code) 488.52 297.67 T
(generation) 488.52 289.67 T
(planned\051) 488.52 281.67 T
71.64 209.13 102.24 276.88 R
5 X
V
1 F
0 X
(Rapide) 75.15 241.67 T
0 F
(implicit con-) 105.24 269.67 T
(\336g.; graphical) 105.24 261.67 T
(notation; ani-) 105.24 253.67 T
(mated simula-) 105.24 245.67 T
(tion; e) 105.24 237.67 T
(v) 125.26 237.67 T
(ent) 129.14 237.67 T
(\336ltering) 105.24 229.67 T
(none) 158.76 269.67 T
(parser; com-) 209.55 269.67 T
(piler; constraint) 209.55 261.67 T
(check) 209.55 253.67 T
(er to) 228.13 253.67 T
(ensure v) 209.55 245.67 T
(alid) 236.24 245.67 T
(mappings) 209.55 237.67 T
(e) 267.48 269.67 T
(v) 270.84 269.67 T
(ent) 274.72 269.67 T
(\336ltering) 267.48 261.67 T
(and) 267.48 253.67 T
(animation) 267.48 245.67 T
(inheritance) 311.22 269.67 T
(\050structural) 311.22 261.67 T
(subtyping\051) 311.22 253.67 T
(constrained) 358.02 269.67 T
(dynamism:) 358.02 261.67 T
(conditional) 358.02 253.67 T
(con\336gura-) 358.02 245.67 T
(tion and) 358.02 237.67 T
(dynamic) 358.02 229.67 T
-0.19 (e) 358.02 221.67 P
-0.19 (v) 361.37 221.67 P
-0.19 (ent genera-) 365.25 221.67 P
(tion) 358.02 213.67 T
(re\336nement) 404.82 269.67 T
(maps) 404.82 261.67 T
(enable com-) 404.82 253.67 T
(parati) 404.82 245.67 T
(v) 422.83 245.67 T
(e) 426.71 245.67 T
(simulations) 404.82 237.67 T
(of architec-) 404.82 229.67 T
(tures at dif-) 404.82 221.67 T
(ferent le) 404.82 213.67 T
(v) 431.05 213.67 T
(els) 434.93 213.67 T
(te) 456.41 269.67 T
(xtual) 462.07 269.67 T
(<->) 461.39 261.67 T
(graphical;) 451.24 253.67 T
(constraint) 449.95 245.67 T
(checking) 449.95 237.67 T
(across) 449.95 229.67 T
(re\336nement) 449.95 221.67 T
(le) 449.95 213.67 T
(v) 455.53 213.67 T
(els) 459.41 213.67 T
(simulation by) 488.52 269.67 T
(generating) 488.52 261.67 T
(e) 488.52 253.67 T
(v) 491.88 253.67 T
(ent posets;) 495.76 253.67 T
(system con-) 488.52 245.67 T
(struction in C/) 488.52 237.67 T
(C++, Ada,) 488.52 229.67 T
(VHDL, and) 488.52 221.67 T
(Rapide) 488.52 213.67 T
71.64 165.13 102.24 208.88 R
5 X
V
1 F
0 X
(SADL) 76.71 185.67 T
0 F
(e) 105.24 201.67 T
(xplicit con\336g.) 108.67 201.67 T
(none) 158.76 201.67 T
(parser; relati) 209.55 201.67 T
(v) 249.56 201.67 T
(e) 253.44 201.67 T
(correctness of) 209.55 193.67 T
(architectures) 209.55 185.67 T
(w) 209.55 177.67 T
(.r) 214.81 177.67 T
(.t. a re\336ne-) 219.04 177.67 T
(ment map) 209.55 169.67 T
(none) 267.48 201.67 T
(component) 311.22 201.67 T
(and connec-) 311.22 193.67 T
(tor re\336ne-) 311.22 185.67 T
(ment via) 311.22 177.67 T
(pattern maps) 311.22 169.67 T
(none) 358.02 201.67 T
(maps) 404.82 201.67 T
(enable cor-) 404.82 193.67 T
(rect re\336ne-) 404.82 185.67 T
-0.99 (ments across) 404.82 177.67 P
(le) 404.82 169.67 T
(v) 410.39 169.67 T
(els) 414.27 169.67 T
(re\336nement) 449.95 201.67 T
(across) 449.95 193.67 T
(le) 449.95 185.67 T
(v) 455.53 185.67 T
(els) 459.41 185.67 T
(none) 488.52 201.67 T
71.64 129.13 102.24 164.88 R
5 X
V
1 F
0 X
(UniCon) 74.04 145.67 T
0 F
(e) 105.24 157.67 T
(xplicit con-) 108.67 157.67 T
(\336g.; graphical) 105.24 149.67 T
(notation) 105.24 141.67 T
(proacti) 158.76 157.67 T
(v) 180.78 157.67 T
(e) 184.66 157.67 T
(GUI editor) 158.76 149.67 T
(in) 158.76 141.67 T
(v) 164.67 141.67 T
(ok) 168.51 141.67 T
(es lan-) 176.43 141.67 T
(guage check) 158.76 133.67 T
(er) 198.44 133.67 T
(parser; com-) 209.55 157.67 T
(piler; schedula-) 209.55 149.67 T
(bility analysis) 209.55 141.67 T
(none) 267.48 157.67 T
(none) 311.22 157.67 T
(none) 358.02 157.67 T
(none) 404.82 157.67 T
(te) 456.41 157.67 T
(xtual) 462.07 157.67 T
(<->) 461.39 149.67 T
(graphical) 452.35 141.67 T
(compiler) 488.52 157.67 T
(generates C) 488.52 149.67 T
(code) 488.52 141.67 T
71.64 85.13 102.24 128.88 R
5 X
V
1 F
0 X
(Wright) 74.93 105.67 T
0 F
(e) 105.24 121.67 T
(xplicit con\336g.) 108.67 121.67 T
(none) 158.76 121.67 T
(parser; model) 209.55 121.67 T
(check) 209.55 113.67 T
(er for type) 228.13 113.67 T
(conformance;) 209.55 105.67 T
(deadlock analy-) 209.55 97.67 T
(sis of connectors) 209.55 89.67 T
(none) 267.48 121.67 T
(type con-) 311.22 121.67 T
(formance) 311.22 113.67 T
(for beha) 311.22 105.67 T
(vior-) 337.49 105.67 T
(ally related) 311.22 97.67 T
(protocols) 311.22 89.67 T
(none) 358.02 121.67 T
(none) 404.82 121.67 T
(none) 449.95 121.67 T
(none) 488.52 121.67 T
71.51 556.88 71.51 85.13 2 L
V
0.25 H
0 Z
N
103.24 557.12 103.24 84.88 2 L
V
2 H
N
156.76 557.12 156.76 84.88 2 L
V
0.25 H
N
207.55 557.12 207.55 84.88 2 L
V
N
265.48 557.12 265.48 84.88 2 L
V
N
309.22 557.12 309.22 84.88 2 L
V
N
356.02 557.12 356.02 84.88 2 L
V
N
402.82 557.12 402.82 84.88 2 L
V
N
447.95 557.12 447.95 84.88 2 L
V
N
486.52 557.12 486.52 84.88 2 L
V
N
540.49 556.88 540.49 85.13 2 L
V
N
71.39 557 540.61 557 2 L
V
N
71.39 529 540.61 529 2 L
V
2 H
N
71.39 501 540.61 501 2 L
V
0.25 H
N
71.39 441 540.61 441 2 L
V
N
71.39 389 540.61 389 2 L
V
N
71.39 321 540.61 321 2 L
V
N
71.39 277 540.61 277 2 L
V
N
71.39 209 540.61 209 2 L
V
N
71.39 165 540.61 165 2 L
V
N
71.39 129 540.61 129 2 L
V
N
71.39 85 540.61 85 2 L
V
N
72 556.5 103.25 528.75 2 L
1 H
2 Z
N
1 7 Q
(Ar) 0 -40 85.43 554.3 TF
(ch.) 0 -40 91.58 549.13 TF
(Domain) 0 -40 81.73 549.67 TF
(ADL) 0 -43 76.11 541.89 TF
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(11) 301 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
(5. Ar) 72 712 T
(chitectural vs. A) 97.78 712 T
(pplication Domains) 181.13 712 T
0 10 Q
0.73 (Ov) 72 690.33 P
0.73 (er the past decade there has been interest in relating) 84.07 690.33 P
1.25 (architectures, which are in the solution domain, to the) 72 678.33 P
1.03 (problem \050or application\051 domain, leading to the notion) 72 666.33 P
19.96 (of) 72 654.33 P
2 F
19.96 (domain-speci\336c softwar) 102.79 654.33 P
19.96 (e ar) 218.22 654.33 P
19.96 (c) 253.64 654.33 P
19.96 (hitectur) 257.93 654.33 P
19.96 (es) 288.67 654.33 P
1.57 (\050DSSAs\051) 72 642.33 P
0 F
1.57 ([T) 108.38 642.33 P
1.57 (ra95]. A DSSA pro) 117.47 642.33 P
1.57 (vides a single \050generic\051) 199.25 642.33 P
2 F
0.45 (r) 72 630.33 P
0.45 (efer) 75.52 630.33 P
0.45 (ence ar) 90.7 630.33 P
0.45 (c) 120.49 630.33 P
0.45 (hitectur) 124.78 630.33 P
0.45 (e) 155.52 630.33 P
0 F
0.45 (, which re\337ects the characteristics) 159.96 630.33 P
1.22 (of a particular problem domain, and which is instanti-) 72 618.33 P
0.38 (ated for each speci\336c application in that domain.) 72 606.33 P
2 F
0.38 (Ar) 271.97 606.33 P
0.38 (c) 281.6 606.33 P
0.38 (hi-) 285.89 606.33 P
1.3 (tectur) 72 594.33 P
1.3 (al styles) 95.18 594.33 P
0 F
1.3 (, discussed in Section) 128.98 594.33 P
1.3 (2, pro) 221.5 594.33 P
1.3 (vide another) 245.99 594.33 P
0.54 (w) 72 582.33 P
0.54 (ay of relating the problem and solution spaces. Styles) 79.12 582.33 P
0.61 (are lar) 72 570.33 P
0.61 (gely orthogonal to DSSAs: a single style may be) 97.69 570.33 P
0.2 (applicable to multiple application domains; on the other) 72 558.33 P
(hand, a single DSSA may use multiple styles.) 72 546.33 T
1.28 (An) 72 525.33 P
1.28 (y attempt to further e) 84.07 525.33 P
1.28 (xplore and perhaps generalize) 173.48 525.33 P
2.18 (the relationship between architectural and application) 72 513.33 P
1.54 (domains w) 72 501.33 P
1.54 (ould be greatly aided by a classi\336cation of) 117.05 501.33 P
-0.16 (application domains. W) 72 489.33 P
-0.16 (e are una) 166.16 489.33 P
-0.16 (w) 201.79 489.33 P
-0.16 (are of an) 208.91 489.33 P
-0.16 (y such classi-) 243.43 489.33 P
4.96 (\336cation, although Jackson identi\336ed a number of) 72 477.33 P
2 F
2.49 (domain c) 72 465.33 P
2.49 (har) 111.28 465.33 P
2.49 (acteristics) 125.02 465.33 P
0 F
2.49 ( that could serv) 166.13 465.33 P
2.49 (e as a starting) 234.82 465.33 P
(point for one [Jac95]:) 72 453.33 T
3 11 Q
(\245) 72 440.33 T
2 10 Q
3.2 (static) 81 440.33 P
0 F
3.2 ( vs.) 102.67 440.33 P
2 F
3.2 (dynamic) 125.46 440.33 P
0 F
3.2 ( domains, with the latter being) 159.34 440.33 P
4.32 (application domains ha) 81 428.33 P
4.32 (ving an element of time,) 182.22 428.33 P
(e) 81 416.33 T
(v) 85.19 416.33 T
(ents, and/or state;) 90.04 416.33 T
3 11 Q
(\245) 72 403.33 T
2 10 Q
(one-dimensional) 81 403.33 T
0 F
( vs.) 147.66 403.33 T
2 F
(multi-dimensional) 164.05 403.33 T
0 F
( domains;) 236.83 403.33 T
3 11 Q
(\245) 72 390.33 T
2 10 Q
1.13 (tangible) 81 390.33 P
0 F
1.13 ( vs.) 113.78 390.33 P
2 F
1.13 (intangible) 132.44 390.33 P
0 F
1.13 ( domains, with the latter typi-) 173 390.33 P
2.38 (cally in) 81 378.33 P
2.38 (v) 112.7 378.33 P
2.38 (olving machine representations of abstrac-) 117.5 378.33 P
(tions \050such as user interf) 81 366.33 T
(aces\051;) 178.66 366.33 T
3 11 Q
(\245) 72 353.33 T
2 10 Q
(inert) 81 353.33 T
0 F
( vs.) 99.89 353.33 T
2 F
(r) 116.28 353.33 T
(eactive) 119.8 353.33 T
0 F
( vs.) 148.12 353.33 T
2 F
(active) 164.51 353.33 T
0 F
( dynamic domains; and) 188.39 353.33 T
3 11 Q
(\245) 72 340.33 T
2 10 Q
2.92 (autonomous) 81 340.33 P
0 F
2.92 ( vs.) 129.89 340.33 P
2 F
2.92 (pr) 152.12 340.33 P
2.92 (o) 160.56 340.33 P
2.92 (gr) 165.46 340.33 P
2.92 (ammable) 174.2 340.33 P
0 F
2.92 ( vs.) 210.86 340.33 P
2 F
2.92 (biddable) 233.1 340.33 P
0 F
2.92 ( acti) 268.1 340.33 P
2.92 (v) 287.71 340.33 P
2.92 (e) 292.56 340.33 P
(dynamic domains.) 81 328.33 T
0.49 (Gi) 72 307.33 P
0.49 (v) 81.75 307.33 P
0.49 (en these application domain characteristics, one can) 86.6 307.33 P
2.34 (easily identify a number of useful relationships with) 72 295.33 P
1.31 (architectural domains. F) 72 283.33 P
1.31 (or instance, support for e) 171.4 283.33 P
1.31 (v) 276.09 283.33 P
1.31 (olu-) 280.89 283.33 P
4.45 (tion, e) 72 271.33 P
4.45 (x) 101.3 271.33 P
4.45 (ecutability and dynamic analysis are more) 106.15 271.33 P
0.32 (important for dynamic domains than for static domains.) 72 259.33 P
0.01 (As another e) 72 247.33 P
0.01 (xample, reacti) 122.4 247.33 P
0.01 (v) 178.81 247.33 P
0.01 (e domains are naturally sup-) 183.66 247.33 P
2.78 (ported by a style of representation \050e.g., Statecharts) 72 235.33 P
1.82 ([Har87]\051 that is dif) 72 223.33 P
1.82 (ferent from that in acti) 152.48 223.33 P
1.82 (v) 249.5 223.33 P
1.82 (e domains) 254.35 223.33 P
0.13 (\050e.g., CHAM [IW95]\051. As we deepen our understanding) 72 211.33 P
0.31 (of architectural domains, we will be able to solidify our) 72 199.33 P
3.95 (understanding of their relationship with application) 72 187.33 P
(domains.) 72 175.33 T
1 12 Q
(6. Conclusions) 72 145 T
0 10 Q
-0.11 (Softw) 72 123.33 P
-0.11 (are architecture research has been mo) 95.79 123.33 P
-0.11 (ving forw) 245.28 123.33 P
-0.11 (ard) 284.23 123.33 P
-0.23 (rapidly) 72 111.33 P
-0.23 (. A number of ADLs and their supporting toolsets) 99.68 111.33 P
1.83 (ha) 72 99.33 P
1.83 (v) 81.24 99.33 P
1.83 (e been de) 86.09 99.33 P
1.83 (v) 127.27 99.33 P
1.83 (eloped; man) 132.12 99.33 P
1.83 (y e) 182.96 99.33 P
1.83 (xisting styles ha) 196.58 99.33 P
1.83 (v) 264.5 99.33 P
1.83 (e been) 269.35 99.33 P
1.39 (adopted and ne) 72 87.33 P
1.39 (w ones in) 135.07 87.33 P
1.39 (v) 175.79 87.33 P
1.39 (ented. Theoretical underpin-) 180.64 87.33 P
1.17 (nings for the study of softw) 72 75.33 P
1.17 (are architectures ha) 188.04 75.33 P
1.17 (v) 267.93 75.33 P
1.17 (e also) 272.78 75.33 P
2.86 (be) 315 713.33 P
2.86 (gun to emer) 324.29 713.33 P
2.86 (ge in the form of de\336nitions [PW92,) 377.59 713.33 P
1.39 (GS93] and formal classi\336cations of styles [SC96] and) 315 700.91 P
(ADLs [Med97, MT97].) 315 688.5 T
0.26 (This body of w) 315 662.5 P
0.26 (ork re\337ects a wide spectrum of vie) 376.51 662.5 P
0.26 (ws on) 516.13 662.5 P
0.81 (what architecture is, what aspects of it should be mod-) 315 650.08 P
0.62 (eled and ho) 315 637.66 P
0.62 (w) 362.09 637.66 P
0.62 (, and what its relationship is to other soft-) 368.66 637.66 P
8.02 (w) 315 625.24 P
8.02 (are de) 322.12 625.24 P
8.02 (v) 354.04 625.24 P
8.02 (elopment concepts and artif) 358.89 625.24 P
8.02 (acts. This) 493.65 625.24 P
0.32 (di) 315 612.82 P
0.32 (v) 322.53 612.82 P
0.32 (er) 327.38 612.82 P
0.32 (gence of vie) 334.97 612.82 P
0.32 (ws has also resulted in a di) 384.23 612.82 P
0.32 (v) 493.09 612.82 P
0.32 (er) 497.94 612.82 P
0.32 (gence of) 505.53 612.82 P
-0.12 (ADLs\325 conceptual frame) 315 600.4 P
-0.12 (w) 413.92 600.4 P
-0.12 (orks \050as de\336ned in Section) 421.04 600.4 P
-0.12 (2\051.) 529.17 600.4 P
2.38 (Such fragmentation has made it dif) 315 587.98 P
2.38 (\336cult to establish) 466.9 587.98 P
-0.07 (whether there e) 315 575.57 P
-0.07 (xists in ADLs a notion similar to compu-) 376.34 575.57 P
2.66 (tational equi) 315 563.15 P
2.66 (v) 367.13 563.15 P
2.66 (alence in programming languages. Fur-) 371.88 563.15 P
(thermore, sharing support tools has been dif) 315 550.73 T
(\336cult.) 490.56 550.73 T
0.49 (A) 315 524.73 P
0.49 (CME has attempted to pro) 321.82 524.73 P
0.49 (vide a basis for interchang-) 429.18 524.73 P
2.28 (ing architectural descriptions across ADLs. Ho) 315 512.31 P
2.28 (we) 513.87 512.31 P
2.28 (v) 525.28 512.31 P
2.28 (er) 530.13 512.31 P
2.28 (,) 537.5 512.31 P
3.19 (A) 315 499.89 P
3.19 (CME has thus f) 321.82 499.89 P
3.19 (ar been much more successful at) 393.8 499.89 P
0.28 (achie) 315 487.47 P
0.28 (ving architectural interchange at the syntactic \050i.e.,) 335.85 487.47 P
1.9 (structural\051 le) 315 475.05 P
1.9 (v) 367.47 475.05 P
1.9 (el, than at the semantic le) 372.32 475.05 P
1.9 (v) 483.25 475.05 P
1.9 (el. Although) 488.1 475.05 P
0.28 (some of the A) 315 462.64 P
0.28 (CME team\325) 371.81 462.64 P
0.28 (s recent w) 418.48 462.64 P
0.28 (ork looks encourag-) 459.47 462.64 P
0.61 (ing, this still remains an open problem. One of the rea-) 315 450.22 P
0.22 (sons A) 315 437.8 P
0.22 (CME has encountered dif) 342.32 437.8 P
0.22 (\336culties is precisely the) 445.19 437.8 P
0.36 (f) 315 425.38 P
0.36 (act that there is only limited agreement in the architec-) 318.23 425.38 P
1.03 (ture community on some fundamental issues, the most) 315 412.96 P
0.84 (critical of which is what problems architectures should) 315 400.54 P
(attempt to solv) 315 388.12 T
(e.) 374.3 388.12 T
2.06 (This paper presents an important \336rst step to) 315 362.12 P
2.06 (w) 507.22 362.12 P
2.06 (ards a) 514.34 362.12 P
1.5 (solution to this problem. W) 315 349.71 P
1.5 (e ha) 429.93 349.71 P
1.5 (v) 447.62 349.71 P
1.5 (e recognized that the) 452.47 349.71 P
0.91 (\336eld of softw) 315 337.29 P
0.91 (are architecture is concerned with se) 370.06 337.29 P
0.91 (v) 520.16 337.29 P
0.91 (eral) 525.01 337.29 P
1.24 (domains and that e) 315 324.87 P
1.24 (v) 393.73 324.87 P
1.24 (ery ADL re\337ects the properties of) 398.58 324.87 P
4.29 (one or more domains from this set. Architectural) 315 312.45 P
3.11 (domains thus pro) 315 300.03 P
3.11 (vide a unifying vie) 389.95 300.03 P
3.11 (w to what had) 474.3 300.03 P
0.9 (seemed lik) 315 287.61 P
0.9 (e a disparate collection of approaches, nota-) 358.85 287.61 P
1.99 (tions, techniques, and tools. The task of architectural) 315 275.2 P
-0.06 (interchange can be greatly aided by studying the interre-) 315 262.78 P
6.18 (lationships among architectural domains. Existing) 315 250.36 P
1.79 (ADLs can be better understood in this ne) 315 237.94 P
1.79 (w light and) 491.42 237.94 P
0.25 (ne) 315 225.52 P
0.25 (w ADLs more easily de) 324.19 225.52 P
0.25 (v) 419.91 225.52 P
0.25 (eloped to solv) 424.76 225.52 P
0.25 (e a speci\336c set) 481.22 225.52 P
(of problems.) 315 213.1 T
0.24 (Much further w) 315 187.1 P
0.24 (ork is still needed, ho) 378.14 187.1 P
0.24 (we) 464.67 187.1 P
0.24 (v) 476.08 187.1 P
0.24 (er) 480.93 187.1 P
0.24 (. Our current) 488.15 187.1 P
0.95 (understanding of the relationship between architectural) 315 174.68 P
2.83 (domains and formal semantic theories \050Section) 315 162.27 P
2.83 (2\051 is) 519.67 162.27 P
1.22 (limited. Also, we need to e) 315 149.85 P
1.22 (xamine whether there e) 428.45 149.85 P
1.22 (xist) 525.55 149.85 P
1.17 (techniques that can more ef) 315 137.43 P
1.17 (fecti) 429.41 137.43 P
1.17 (v) 446.93 137.43 P
1.17 (ely support the needs) 451.78 137.43 P
0.96 (of particular architectural domains than those pro) 315 125.01 P
0.96 (vided) 517.78 125.01 P
0.08 (by e) 315 112.59 P
0.08 (xisting ADLs. Finally) 331.87 112.59 P
0.08 (, a more thorough understand-) 418.88 112.59 P
0.84 (ing of the relationship between architectural and appli-) 315 100.17 P
8.18 (cation domains is crucial if architecture-based) 315 87.75 P
(de) 315 75.34 T
(v) 324.19 75.34 T
(elopment is to ful\336ll its potential.) 329.04 75.34 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(12) 301 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
(7. Ackno) 72 712 T
(wledgements) 117.22 712 T
0 10 Q
0.17 (W) 72 689.83 P
0.17 (e w) 80.64 689.83 P
0.17 (ould lik) 94.87 689.83 P
0.17 (e to thank Richard T) 125.78 689.83 P
0.17 (aylor) 207.88 689.83 P
0.17 (, Pe) 228.03 689.83 P
0.17 (yman Oreizy) 243.05 689.83 P
0.17 (,) 294.5 689.83 P
0.89 (Jason Robbins, Da) 72 677.83 P
0.89 (vid Redmiles, and Da) 148.31 677.83 P
0.89 (vid Hilbert for) 237.44 677.83 P
2.69 (their participation in numerous discussions of issues) 72 665.83 P
0.14 (concerning ADLs. W) 72 653.83 P
0.14 (e also thank the DSL re) 157.28 653.83 P
0.14 (vie) 251.85 653.83 P
0.14 (wers for) 263.83 653.83 P
(their helpful re) 72 641.83 T
(vie) 131.18 641.83 T
(ws.) 143.15 641.83 T
2.87 (Ef) 72 620.33 P
2.87 (fort partially sponsored by the Defense Adv) 81.19 620.33 P
2.87 (anced) 273.68 620.33 P
1.73 (Research Projects Agenc) 72 608.33 P
1.73 (y) 175.28 608.33 P
1.73 (, and Rome Laboratory) 179.63 608.33 P
1.73 (, Air) 276.94 608.33 P
4.03 (F) 72 596.33 P
4.03 (orce Materiel Command, USAF) 77.41 596.33 P
4.03 (, under agreement) 217.02 596.33 P
4.45 (numbers F30602-94-C-0218 and F30602-97-2-0021.) 72 584.33 P
1.91 (The U.S. Go) 72 572.33 P
1.91 (v) 126.23 572.33 P
1.91 (ernment is authorized to reproduce and) 131.08 572.33 P
1.27 (distrib) 72 560.33 P
1.27 (ute reprints for Go) 97.36 560.33 P
1.27 (v) 175.18 560.33 P
1.27 (ernmental purposes notwith-) 180.03 560.33 P
(standing an) 72 548.33 T
(y cop) 117.68 548.33 T
(yright annotation thereon.) 139.52 548.33 T
(Appro) 72 526.83 T
(v) 97.4 526.83 T
(ed for Public Release \321 Distrib) 102.25 526.83 T
(ution Unlimited.) 230.09 526.83 T
-0.1 (The vie) 72 505.33 P
-0.1 (ws and conclusions contained herein are those of) 101.92 505.33 P
0.49 (the authors and should not be interpreted as necessarily) 72 493.33 P
0.09 (representing the of) 72 481.33 P
0.09 (\336cial policies or endorsements, either) 146.92 481.33 P
5.95 (e) 72 469.33 P
5.95 (xpressed or implied, of the Defense Adv) 76.29 469.33 P
5.95 (anced) 273.68 469.33 P
-0.12 (Research Projects Agenc) 72 457.33 P
-0.12 (y) 171.59 457.33 P
-0.12 (, Rome Laboratory or the U.S.) 175.94 457.33 P
(Go) 72 445.33 T
(v) 84.07 445.33 T
(ernment.) 88.92 445.33 T
0.71 (This material is also partially based on w) 72 423.83 P
0.71 (ork supported) 241.02 423.83 P
2.01 (by the National Science F) 72 411.83 P
2.01 (oundation under Grant No.) 183.21 411.83 P
(CCR-9701973.) 72 399.83 T
1 12 Q
(8. Refer) 72 369 T
(ences) 112.43 369 T
0 10 Q
1.39 ([AG94a] R. Allen and D. Garlan. Formal Connectors.) 72 346.83 P
7.25 (Technical Report, CMU-CS-94-115, Carnegie) 90 334.83 P
(Mellon University, March 1994.) 90 322.83 T
6.62 ([AG94b] R. Allen and D. Garlan. Formalizing) 72 309.33 P
3.05 (Architectural Connection. In) 90 297.33 P
2 F
3.05 (Pr) 216.36 297.33 P
3.05 (oceedings of the) 225.91 297.33 P
4.16 (Sixteenth International Confer) 90 285.33 P
4.16 (ence on Softwar) 220.17 285.33 P
4.16 (e) 292.56 285.33 P
3.57 (Engineering) 90 273.33 P
0 F
3.57 (, pages 71-80, Sorrento, Italy, May) 139.44 273.33 P
(1994.) 90 261.33 T
6 ([All96] R. Allen. HLA: A Standards Effort as) 72 247.83 P
-0.07 (Architectural Style. In A. L. Wolf, ed.,) 90 235.83 P
2 F
-0.07 (Proceedings) 247.01 235.83 P
1.46 (of the Second International Software Architecture) 90 223.83 P
-0.26 (Workshop \050ISAW-2\051) 90 211.83 P
0 F
-0.26 (, pages 130-133, San Francisco,) 170.55 211.83 P
(CA, October 1996.) 90 199.83 T
0.04 ([BR95] G. Booch and J. Rumbaugh.) 72 186.33 P
2 F
0.04 (Uni\336ed Method for) 220.27 186.33 P
2.95 (Object-Oriented De) 90 174.33 P
2.95 (velopment) 172.5 174.33 P
0 F
2.95 (. Rational Software) 213.6 174.33 P
(Corporation, 1995.) 90 162.33 T
0.52 ([DK76] F. DeRemer and H. H. Kron. Programming-in-) 72 148.83 P
2.53 (the-large versus Programming-in-the-small.) 90 136.83 P
2 F
2.53 (IEEE) 275.34 136.83 P
-0.55 (T) 90 124.83 P
-0.55 (r) 95.01 124.83 P
-0.55 (ansactions on Softwar) 98.75 124.83 P
-0.55 (e Engineering) 186.18 124.83 P
0 F
-0.55 (, pages 80-86,) 242 124.83 P
(June 1976.) 90 112.83 T
1.05 ([For92]) 72 99.33 P
2 F
1.05 (F) 106.1 99.33 P
1.05 (ailur) 111.46 99.33 P
1.05 (es Diver) 130.54 99.33 P
1.05 (g) 164.82 99.33 P
1.05 (ence Re\336nement: User Manual) 169.72 99.33 P
5.62 (and T) 90 87.33 P
5.62 (utorial) 118.13 87.33 P
0 F
5.62 (. Formal Systems \050Europe\051 Ltd.,) 145.36 87.33 P
(Oxford, England, October 1992.) 90 75.33 T
3.22 ([GAO94] D. Garlan, R. Allen, and J. Ockerbloom.) 315 713.33 P
11.34 (Exploiting Style in Architectural Design) 333 701.33 P
4.05 (Environments. In) 333 689.33 P
2 F
4.05 (Proceedings of SIGSOFT\32594:) 413.04 689.33 P
1.18 (Foundations of Software Engineering) 333 677.33 P
0 F
1.18 (, pages 175\320) 487.37 677.33 P
3.8 (188, New Orleans, Louisiana, USA, December) 333 665.33 P
(1994.) 333 653.33 T
3.16 ([Gar95] D. Garlan, editor.) 315 640.26 P
2 F
3.16 (Pr) 434.57 640.26 P
3.16 (oceedings of the F) 444.12 640.26 P
3.16 (ir) 526.76 640.26 P
3.16 (st) 533.33 640.26 P
7.48 (International W) 333 628.26 P
7.48 (orkshop on Ar) 403.17 628.26 P
7.48 (c) 474.99 628.26 P
7.48 (hitectur) 479.28 628.26 P
7.48 (es for) 510.02 628.26 P
(Softwar) 333 616.26 T
(e Systems) 363.75 616.26 T
0 F
(, Seattle, WA, April 1995.) 402.35 616.26 T
6.95 ([Gar96] D. Garlan. Style-Based Refinement for) 315 603.18 P
6.55 (Software Architecture. In A. L. Wolf, ed.,) 333 591.18 P
2 F
1.62 (Pr) 333 579.18 P
1.62 (oceedings of the Second International Softwar) 342.55 579.18 P
1.62 (e) 535.56 579.18 P
0.65 (Ar) 333 567.18 P
0.65 (c) 342.63 567.18 P
0.65 (hitectur) 346.92 567.18 P
0.65 (e W) 377.66 567.18 P
0.65 (orkshop \050ISA) 392.66 567.18 P
0.65 (W) 444.84 567.18 P
0.65 (-2\051) 452.8 567.18 P
0 F
0.65 (, pages 72-75, San) 464.46 567.18 P
(Francisco, CA, October 1996.) 333 555.18 T
0.28 ([GMW95] D. Garlan, R. Monroe, and D. Wile. ACME:) 315 542.1 P
9.94 (An Architectural Interconnection Language.) 333 530.1 P
7.25 (Technical Report, CMU-CS-95-219, Carnegie) 333 518.1 P
(Mellon University, November 1995.) 333 506.1 T
0.28 ([GMW97] D. Garlan, R. Monroe, and D. Wile. ACME:) 315 493.03 P
1.14 (An Architecture Interchange Language. Submitted) 333 481.03 P
(for publication, January 1997.) 333 469.03 T
1.45 ([GPT95] D. Garlan, F. N. Paulisch, and W. F. Tichy,) 315 455.95 P
3.05 (editors.) 333 443.95 P
2 F
3.05 (Summary of the Da) 368.27 443.95 P
3.05 (gstuhl W) 454.82 443.95 P
3.05 (orkshop on) 492.23 443.95 P
0.38 (Softwar) 333 431.95 P
0.38 (e Ar) 363.75 431.95 P
0.38 (c) 380.7 431.95 P
0.38 (hitectur) 384.99 431.95 P
0.38 (e) 415.73 431.95 P
0 F
0.38 (, February 1995. Reprinted in) 420.17 431.95 P
2.46 (ACM Software Engineering Notes, pages 63-83,) 333 419.95 P
(July 1995.) 333 407.95 T
2.4 ([GS93] D. Garlan and M. Shaw.) 315 394.87 P
2 F
2.4 (An Introduction to) 461.31 394.87 P
6.61 (Software Architecture: Advances in Software) 333 382.87 P
-0.54 (Engineering and Knowledge Engineering) 333 370.87 P
0 F
-0.54 (, volume I.) 497.75 370.87 P
(World Scientific Publishing, 1993.) 333 358.87 T
3.06 ([GW88] J. A. Goguen and T. Winkler. Introducing) 315 345.8 P
5.78 (OBJ3. Technical Report SRI-CSL-88-99. SRI) 333 333.8 P
(International, 1988) 333 321.8 T
0.92 ([Har87] D. Harel. Statecharts: A Visual Formalism for) 315 308.72 P
11.54 (Complex Systems.) 333 296.72 P
2 F
11.54 (Science of Computer) 433.6 296.72 P
(Pr) 333 284.72 T
(o) 342.55 284.72 T
(gr) 347.45 284.72 T
(amming) 356.19 284.72 T
0 F
(, 1987.) 388.41 284.72 T
2.6 ([Hoa85] C. A. R. Hoare.) 315 271.64 P
2 F
2.6 (Communicating Sequential) 428.79 271.64 P
(Pr) 333 259.64 T
(ocesses) 342.55 259.64 T
0 F
(. Prentice Hall, 1985.) 372.54 259.64 T
6.95 ([IW95] P. Inverardi and A. L. Wolf. Formal) 315 246.57 P
12.59 (Specification and Analysis of Software) 333 234.57 P
-0.54 (Architectures Using the Chemical Abstract Machine) 333 222.57 P
12.5 (Model.) 333 210.57 P
2 F
12.5 (IEEE T) 376.61 210.57 P
12.5 (r) 418.29 210.57 P
12.5 (ansactions on Softwar) 422.02 210.57 P
12.5 (e) 535.56 210.57 P
(Engineering) 333 198.57 T
0 F
(, pages 373-386, April 1995.) 382.44 198.57 T
6.54 ([Jac95] M. Jackson.) 315 185.49 P
2 F
6.54 (Softwar) 417.11 185.49 P
6.54 (e Requir) 447.86 185.49 P
6.54 (ements and) 488.19 185.49 P
2.61 (Speci\336cations: A Le) 333 173.49 P
2.61 (xicon of Pr) 418 173.49 P
2.61 (actice) 467.5 173.49 P
2.61 (, Principles) 491.28 173.49 P
(and Pr) 333 161.49 T
(ejudices.) 360.13 161.49 T
0 F
( Addison-Wesley, 1995.) 395.4 161.49 T
-0.56 ([LKA+95] D. C. Luckham, J. J. Kenney, L. M. Augustin,) 315 148.41 P
0.32 (J. Vera, D. Bryan, and W. Mann. Specification and) 333 136.41 P
3.4 (Analysis of System Architecture Using Rapide.) 333 124.41 P
2 F
0.07 (IEEE Transactions on Software Engineering) 333 112.41 P
0 F
0.07 (, pages) 512.16 112.41 P
(336-355, April 1995.) 333 100.41 T
0.07 ([Luc87] D.) 315 87.33 P
0.07 (Luckham.) 362.07 87.33 P
2 F
0.07 (ANN) 404.91 87.33 P
0.07 (A, a langua) 424.09 87.33 P
0.07 (g) 470.51 87.33 P
0.07 (e for annotating) 475.41 87.33 P
1.95 (Ada pr) 333 75.33 P
1.95 (o) 362 75.33 P
1.95 (gr) 366.9 75.33 P
1.95 (ams: r) 375.64 75.33 P
1.95 (efer) 403.06 75.33 P
1.95 (ence manual) 418.24 75.33 P
0 F
1.95 (, v) 471.01 75.33 P
1.95 (olume 260 of) 482.76 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(13) 301 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
4.63 (Lectur) 90 713.33 P
4.63 (e Notes in Computer Science) 115.74 713.33 P
0 F
4.63 (. Springer) 249.8 713.33 P
4.63 (-) 293.67 713.33 P
(V) 90 701.33 T
(erlag, Berlin, 1987.) 96.11 701.33 T
1.53 ([LV95] D. C. Luckham and J. Vera. An Event-Based) 72 687.93 P
14.94 (Architecture Definition Language.) 90 675.93 P
2 F
14.94 (IEEE) 275.34 675.93 P
0.73 (Transactions on Software Engineering) 90 663.93 P
0 F
0.73 (, pages 717-) 246.93 663.93 P
(734, September 1995.) 90 651.93 T
3.74 ([LVB+93] D. C. Luckham, J. Vera, D. Bryan, L.) 72 638.53 P
1.32 (Augustin, and F. Belz. Partial Orderings of Event) 90 626.53 P
7.9 (Sets and Their Application to Prototyping) 90 614.53 P
-0.46 (Concurrent, Timed Systems.) 90 602.53 P
2 F
-0.46 (J) 205.57 602.53 P
-0.46 (ournal of Systems and) 209.76 602.53 P
(Softwar) 90 590.53 T
(e) 120.75 590.53 T
0 F
(, pages 253-265, June 1993.) 125.19 590.53 T
-0.06 ([LVM95] D. C. Luckham, J. Vera, and S. Meldal. Three) 72 577.13 P
4.6 (Concepts of System Architecture. Unpublished) 90 565.13 P
(Manuscript, July 1995.) 90 553.13 T
8.28 ([Med96] N. Medvidovic. ADLs and Dynamic) 72 539.73 P
6.82 (Architecture Changes. In A. L. Wolf, ed.,) 90 527.73 P
2 F
1.62 (Pr) 90 515.73 P
1.62 (oceedings of the Second International Softwar) 99.55 515.73 P
1.62 (e) 292.56 515.73 P
0.65 (Ar) 90 503.73 P
0.65 (c) 99.63 503.73 P
0.65 (hitectur) 103.92 503.73 P
0.65 (e W) 134.66 503.73 P
0.65 (orkshop \050ISA) 149.66 503.73 P
0.65 (W) 201.84 503.73 P
0.65 (-2\051) 209.8 503.73 P
0 F
0.65 (, pages 24-27, San) 221.46 503.73 P
(Francisco, CA, October 1996.) 90 491.73 T
8.06 ([Med97] N. Medvidovic. A Classification and) 72 478.33 P
1.07 (Comparison Framework for Software Architecture) 90 466.33 P
3.7 (Description Languages. Technical Report, UCI-) 90 454.33 P
-0.26 (ICS-97-02, University of California, Irvine, January) 90 442.33 P
(1997.) 90 430.33 T
1.71 ([MDEK95] J. Magee, N. Dulay, S. Eisenbach, and J.) 72 416.93 P
14.01 (Kramer. Specifying Distributed Software) 90 404.93 P
-0.04 (Architectures. In) 90 392.93 P
2 F
-0.04 (Pr) 159.62 392.93 P
-0.04 (oceedings of the F) 169.17 392.93 P
-0.04 (ifth Eur) 242.21 392.93 P
-0.04 (opean) 272.56 392.93 P
7.59 (Softwar) 90 380.93 P
7.59 (e Engineering Confer) 120.75 380.93 P
7.59 (ence \050ESEC\32595\051) 222.21 380.93 P
0 F
7.59 (,) 294.5 380.93 P
(Barcelona, September 1995.) 90 368.93 T
0.46 ([MK96] J. Magee and J. Kramer. Dynamic Structure in) 72 355.53 P
2.96 (Software Architectures. In) 90 343.53 P
2 F
2.96 (Proceedings of ACM) 207.19 343.53 P
11.34 (SIGSOFT\32596: Fourth Symposium on the) 90 331.53 P
-0.6 (Foundations of Software Engineering \050FSE4\051) 90 319.53 P
0 F
-0.6 (, pages) 269.83 319.53 P
(3-14, San Francisco, CA, October 1996.) 90 307.53 T
0.66 ([MOT97] N. Medvidovic, P. Oreizy, and R. N. Taylor.) 72 294.13 P
2.79 (Reuse of Off-the-Shelf Components in C2-Style) 90 282.13 P
8.05 (Architectures. In) 90 270.13 P
2 F
8.05 (Pr) 175.8 270.13 P
8.05 (oceedings of the 1997) 185.35 270.13 P
-0.52 (Symposium on Softwar) 90 258.13 P
-0.52 (e Reusability \050SSR\32597\051) 180.26 258.13 P
0 F
-0.52 (, pages) 269.75 258.13 P
1.56 (190-198, Boston, MA, May 17-19, 1997. Also in) 90 246.13 P
2 F
1.13 (Proceedings of the 1997 International Conference) 90 234.13 P
-0.54 (on Software Engineering \050ICSE\32597\051) 90 222.13 P
0 F
-0.54 (, pages 692-700,) 231.98 222.13 P
(Boston, MA, May 17-23, 1997.) 90 210.13 T
-0.52 ([MORT96] N. Medvidovic, P. Oreizy, J. E. Robbins, and) 72 196.73 P
4.36 (R. N. Taylor. Using object-oriented typing to) 90 184.73 P
3.15 (support architectural design in the C2 style. In) 90 172.73 P
2 F
8.56 (Proceedings of ACM SIGSOFT\32596: Fourth) 90 160.73 P
6.57 (Symposium on the Foundations of Software) 90 148.73 P
1.74 (Engineering \050FSE4\051) 90 136.73 P
0 F
1.74 (, pages 24-32, San Francisco,) 172.56 136.73 P
(CA, October 1996.) 90 124.73 T
7.42 ([MQR95] M. Moriconi, X. Qian, and R. A.) 72 111.33 P
-0.52 (Riemenschneider. Correct Architecture Refinement.) 90 99.33 P
2 F
0.07 (IEEE Transactions on Software Engineering) 90 87.33 P
0 F
0.07 (, pages) 269.16 87.33 P
(356-372, April 1995.) 90 75.33 T
0.35 ([MT96] N. Medvidovic and R. N. Taylor. Reusing Off-) 315 713.33 P
3.67 (the-Shelf Components to Develop a Family of) 333 701.33 P
4.18 (Applications in the C2 Architectural Style. In) 333 689.33 P
2 F
4.51 (Pr) 333 677.33 P
4.51 (oceedings of the International W) 342.55 677.33 P
4.51 (orkshop on) 490.77 677.33 P
11.88 (De) 333 665.33 P
11.88 (velopment and Evolution of Softwar) 344.51 665.33 P
11.88 (e) 535.56 665.33 P
1.2 (Ar) 333 653.33 P
1.2 (c) 342.63 653.33 P
1.2 (hitectur) 346.92 653.33 P
1.2 (es for Pr) 377.66 653.33 P
1.2 (oduct F) 414.6 653.33 P
1.2 (amilies) 445.88 653.33 P
0 F
1.2 (, Las Navas del) 474.77 653.33 P
(Marqu\216s, \347vila, Spain, November 1996.) 333 641.33 T
-0.06 ([MT97] N. Medvidovic and R. N. Taylor. A Framework) 315 629.13 P
7.59 (for Classifying and Comparing Architecture) 333 617.13 P
-0.56 (Description Languages. To appear in) 333 605.13 P
2 F
-0.56 (Pr) 480.74 605.13 P
-0.56 (oceedings of) 490.29 605.13 P
10.29 (the Sixth Eur) 333 593.13 P
10.29 (opean Softwar) 405.35 593.13 P
10.29 (e Engineering) 473.33 593.13 P
3.83 (Confer) 333 581.13 P
3.83 (ence to) 360.41 581.13 P
3.83 (g) 392.74 581.13 P
3.83 (ether with F) 397.64 581.13 P
3.83 (ifth A) 453.75 581.13 P
3.83 (CM SIGSOFT) 479.23 581.13 P
6.85 (Symposium on the F) 333 569.13 P
6.85 (oundations of Softwar) 433.88 569.13 P
6.85 (e) 535.56 569.13 P
2.38 (Engineering) 333 557.13 P
0 F
2.38 (, Zurich, Switzerland, September 22-) 382.44 557.13 P
(25, 1997.) 333 545.13 T
3.23 ([MTW96] N. Medvidovic, R. N. Taylor, and E. J.) 315 532.93 P
5.35 (Whitehead, Jr. Formal Modeling of Software) 333 520.93 P
0.66 (Architectures at Multiple Levels of Abstraction. In) 333 508.93 P
2 F
0.34 (Proceedings of the California Software Symposium) 333 496.93 P
(1996) 333 484.93 T
0 F
(, pages 28-40, Los Angeles, CA, April 1996.) 353 484.93 T
-0.61 ([NKM96] K. Ng, J. Kramer, and J. Magee. A CASE Tool) 315 472.73 P
5.41 (for Software Architecture Design.) 333 460.73 P
2 F
5.41 (Journal of) 493.2 460.73 P
2.1 (Automated Software Engineering \050JASE\051, Special) 333 448.73 P
(Issue on CASE-95) 333 436.73 T
0 F
(, 1996.) 405.77 436.73 T
6.26 ([Ore96] Peyman Oreizy. Issues in the Runtime) 315 424.53 P
1.14 (Modification of Software Architectures. Technical) 333 412.53 P
2.1 (Report, UCI-ICS-96-35, University of California,) 333 400.53 P
(Irvine, August 1996.) 333 388.53 T
0.65 ([Pet62] C. A. Petri. Kommunikationen Mit Automaten.) 315 376.33 P
2.97 (PhD Thesis, University of Bonn, 1962. English) 333 364.33 P
3.27 (translation: Technical Report RADC-TR-65-377,) 333 352.33 P
0.85 (Vol.1, Suppl 1, Applied Data Research, Princeton,) 333 340.33 P
(N.J.) 333 328.33 T
2.19 ([PN86] R. Prieto-Diaz and J. M. Neighbors. Module) 315 316.13 P
0.12 (Interconnection Languages.) 333 304.13 P
2 F
0.12 (J) 446.83 304.13 P
0.12 (ournal of Systems and) 451.02 304.13 P
(Softwar) 333 292.13 T
(e) 363.75 292.13 T
0 F
(, pages 307-334, October 1989.) 368.19 292.13 T
-0.08 ([PW92] D. E. Perry and A. L. Wolf. Foundations for the) 315 279.93 P
1.96 (Study of Software Architectures.) 333 267.93 P
2 F
1.96 (ACM SIGSOFT) 474.99 267.93 P
0.68 (Software Engineering Notes) 333 255.93 P
0 F
0.68 (, pages 40-52, October) 447.14 255.93 P
(1992.) 333 243.93 T
4.68 ([RMRR97] J. E. Robbins, N. Medvidovic, D. F.) 315 231.73 P
6.01 (Redmiles, and D. S. Rosenblum. Integrating) 333 219.73 P
8.7 (Architecture Description Languages with a) 333 207.73 P
1.46 (Standard Design Method. Technical Report, UCI-) 333 195.73 P
0.18 (ICS-97-35, University of California, Irvine, August) 333 183.73 P
(1997.) 333 171.73 T
4.09 ([RR96] J. E. Robbins and D. Redmiles. Software) 315 159.53 P
0.99 (architecture design from the perspective of human) 333 147.53 P
1.59 (cognitive needs. In) 333 135.53 P
2 F
1.59 (Proceedings of the California) 416.08 135.53 P
1.51 (Software Symposium \050CSS\32596\051) 333 123.53 P
0 F
1.51 (, Los Angeles, CA,) 458.8 123.53 P
(USA, April 1996.) 333 111.53 T
1.27 ([SC96] M. Shaw and P. Clements. Toward Boxology:) 315 99.33 P
1.68 (Preliminary Classification of Architectural Styles.) 333 87.33 P
3.05 (In A. L. Wolf, ed.,) 333 75.33 P
2 F
3.05 (Pr) 424.92 75.33 P
3.05 (oceedings of the Second) 434.47 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(14) 301 49.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
7.6 (International Softwar) 90 713.33 P
7.6 (e Ar) 183.63 713.33 P
7.6 (c) 207.8 713.33 P
7.6 (hitectur) 212.09 713.33 P
7.6 (e W) 242.83 713.33 P
7.6 (orkshop) 264.78 713.33 P
-0.09 (\050ISA) 90 701.33 P
-0.09 (W) 106.82 701.33 P
-0.09 (-2\051) 114.78 701.33 P
0 F
-0.09 (, pages 50-54, San Francisco, CA, October) 126.44 701.33 P
(1996.) 90 689.33 T
-0.34 ([SDK+95] M. Shaw, R. DeLine, D. V. Klein, T. L. Ross,) 72 677.33 P
2.19 (D. M. Young, and G. Zelesnik. Abstractions for) 90 665.33 P
0.57 (Software Architecture and Tools to Support Them.) 90 653.33 P
2 F
0.28 (IEEE T) 90 641.33 P
0.28 (r) 119.45 641.33 P
0.28 (ansactions on Softwar) 123.19 641.33 P
0.28 (e Engineering) 212.29 641.33 P
0 F
0.28 (, pages) 268.95 641.33 P
(314-335, April 1995.) 90 629.33 T
3.26 ([SG94] M. Shaw and D. Garlan. Characteristics of) 72 617.33 P
-0.11 (Higher-Level Languages for Software Architecture.) 90 605.33 P
7.25 (Technical Report, CMU-CS-94-210, Carnegie) 90 593.33 P
(Mellon University, December 1994.) 90 581.33 T
3.61 ([Spi89] J. M.) 72 569.33 P
3.61 (Spi) 138.11 569.33 P
3.61 (v) 151.2 569.33 P
3.61 (e) 156.05 569.33 P
3.61 (y) 160.34 569.33 P
3.61 (.) 164.69 569.33 P
2 F
3.61 (The Z notation: a r) 173.3 569.33 P
3.61 (efer) 263.5 569.33 P
3.61 (ence) 278.68 569.33 P
(manual) 90 557.33 T
0 F
(. Prentice Hall, Ne) 120 557.33 T
(w Y) 193.9 557.33 T
(ork, 1989.) 209.74 557.33 T
-0.51 ([TLPD95] A. Terry, R. London, G. Papanagopoulos, and) 72 545.33 P
-0.19 (M. Devito. The ARDEC/Teknowledge Architecture) 90 533.33 P
7.25 (Description Language \050ArTek\051, Version 4.0.) 90 521.33 P
1.9 (Technical Report, Teknowledge Federal Systems,) 90 509.33 P
8.35 (Inc. and U.S. Army Armament Research,) 90 497.33 P
(Development, and Engineering Center, July 1995.) 90 485.33 T
2.86 ([Tra95] W.) 72 473.33 P
2.86 (Tracz. DSSA \050Domain-Specific Software) 122.34 473.33 P
12.72 (Architecture\051 Pedagogical Example.) 90 461.33 P
2 F
12.72 (ACM) 275.89 461.33 P
(SIGSOFT Software Engineering Notes) 90 449.33 T
0 F
(, July 1995.) 244.72 449.33 T
-0.43 ([Ves93] S. Vestal. A Cursory Overview and Comparison) 72 437.33 P
6.83 (of Four Architecture Description Languages.) 90 425.33 P
1.76 (Technical Report, Honeywell Technology Center,) 90 413.33 P
(February 1993.) 90 401.33 T
5.23 ([Ves96] S. Vestal. MetaH Programmer\325s Manual,) 72 389.33 P
8.08 (Version 1.09. Technical Report, Honeywell) 90 377.33 P
(Technology Center, April 1996.) 90 365.33 T
0.27 ([Wolf96] A. L. Wolf, editor.) 72 353.33 P
2 F
0.27 (Pr) 190.27 353.33 P
0.27 (oceedings of the Second) 199.82 353.33 P
7.6 (International Softwar) 90 341.33 P
7.6 (e Ar) 183.63 341.33 P
7.6 (c) 207.8 341.33 P
7.6 (hitectur) 212.09 341.33 P
7.6 (e W) 242.83 341.33 P
7.6 (orkshop) 264.78 341.33 P
(\050ISA) 90 329.33 T
(W) 106.82 329.33 T
(-2\051) 114.78 329.33 T
0 F
(, San Francisco, CA, October 1996.) 126.44 329.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 14
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier-Bold
%%+ Courier
%%EOF
