
<HTML>
<HEAD>

<META NAME="Generator" CONTENT="Quadralay WebWorks Publisher 5.0.4">
<META NAME="Page" CONTENT="DefaultSingle">
<META NAME="Title" CONTENT="Overview of E-Business Integration">


<TITLE>Overview of E-Business Integration</TITLE>
	   
<LINK REL="home" HREF="../../products.htm" TITLE="Library">
<LINK REL="toc" HREF="toc.htm" TITLE="Contents">
<LINK REL="index" HREF="index.htm" TITLE="Index">
<LINK REL="copyright" HREF="../../dcommon/html/cpyr.htm" TITLE="Copyright">
<LINK REL="up" HREF="toc.htm" TITLE="Up">
<LINK REL="next" HREF="adois02.htm" TITLE="Next">
<LINK REL="previous" HREF="part1.htm" TITLE="Previous">


<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></HEAD>
       
<BODY BGCOLOR="#ffffff">

<A NAME="top"></A>

<TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>

 
<TD ALIGN="LEFT" VALIGN="TOP"><FONT COLOR="#330099" FACE="Helvetica, Arial, sans-serif"><B>Oracle8<i>i</i> Integration Server Overview<BR>Release 3 (8.1.7)</B><BR>Part Number A83729-01</FONT></B></TD>
<TD VALIGN="BOTTOM" ALIGN="RIGHT" WIDTH="144">
<TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>











<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="../../products.htm"><IMG SRC="../../dcommon/gifs/prodicon.gif" ALT="" BORDER="0" HEIGHT="30" WIDTH="30"><BR>
<FONT SIZE="-2">Library</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="../index.htm"><IMG SRC="../../dcommon/gifs/bookicon.gif" ALT="" BORDER="0" HEIGHT="30" WIDTH="30"><BR>
<FONT SIZE="-2">Product</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="toc.htm"><IMG SRC="../../dcommon/gifs/conticon.gif" ALT="" BORDER="0" HEIGHT="30"
WIDTH="30"><BR>
<FONT SIZE="-2">Contents</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="index.htm"><IMG SRC="../../dcommon/gifs/indxicon.gif" ALT="" BORDER="0" HEIGHT="30"
WIDTH="30"><BR>
<FONT SIZE="-2">Index</FONT></A></TD>

</TR>
</TABLE>
</TD>
</TR>
</TABLE>
<HR>
<P>
<A HREF="part1.htm"><IMG SRC="../../dcommon/gifs/larrow.gif" ALT="Go to previous page" BORDER="0" HEIGHT="30" WIDTH="40"></A>

<A HREF="adois02.htm"><IMG SRC="../../dcommon/gifs/rarrow.gif" ALT="Go to next page" BORDER="0" HEIGHT="30" WIDTH="40"></A>
    




<DIV CLASS="IND">
<!-- End Header -->







<A NAME="998567"></A>
<!--TOC=Title-"998567"-->
<H1 CLASS="Title"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099">1<BR>Overview of E-Business Integration</FONT></H1>

<!--/TOC=Title-->

<A NAME="998652"></A>
<P CLASS="BP">
This chapter provides an overview of the development of an e-business integration solutions and contains these sections:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998653"></A><A HREF="adois01.htm#998568">Introduction to E-Business Integration</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998658"></A><A HREF="adois01.htm#998255">Reasons for E-Business Integration</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998663"></A><A HREF="adois01.htm#998294">E-Business Integration Technologies and Approaches</A>
<P>
</UL>

<A NAME="998568"></A>
<!--TOC=h1-"998568"-->
<H2 CLASS="H1"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Introduction to E-Business Integration</FONT></H2>


<!--/TOC=h1-->

<A NAME="998569"></A>
<P CLASS="BP">
The Internet revolution has advanced to the stage at which every enterprise must become an e-business. This is an imperative and not a choice. Hence, it is necessary to determine when and how an enterprise becomes an e-business. 
</P>

<A NAME="998204"></A>
<P CLASS="BP">
What is e-business? It is a fundamental change to the way an organization conducts business. An e-business uses Internet technology to:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998205"></A>	Attract, satisfy, and retain the customers who buy its products and services
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998206"></A>	Streamline supply chain, manufacturing, and procurement systems to efficiently deliver the right products and services to the customers
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998207"></A>	Automate corporate business processes to reduce cost and improve efficiency through self-service 
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998575"></A>	Capture, analyze, and share business intelligence about customers and company operations. This enables management to make better business decisions and to continually refine business strategy.
<P>
</UL>

<A NAME="998209"></A>
<P CLASS="BP">
An e-business requires a variety of Internet-enabled applications including e-commerce Web sites, portals, supply-chain management, procurement management, online marketplaces, customer relationship management, and enterprise resource planning. All these applications must be integrated with one another to make an enterprise an e-business.
</P>

<A NAME="998210"></A>
<H4 CLASS="FT"><FONT FACE="Arial, Helvetica, sans-serif"><EM>Figure 1-1 &#32;Integration, the Key to E-Business Drivers of E-Business Integration</EM></FONT></H4>
   
<BR><A NAME="998787"><img src=oisov011.gif >
</A>
   
<A NAME="998212"></A>
<P CLASS="BP">
The necessity for businesses to become "zero latency organizations" drives enterprise-wide integration of information systems and applications. For instance, in a smoothly running e-business:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998213"></A>An order received at an electronic storefront is automatically visible to a customer service representative who must answer customer inquiries about its status. 
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998214"></A>The order is automatically propagated to a supply chain application to start a planning and execution operation.
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998215"></A>The order information is exchanged over the Internet with a supplier or partner who provides fulfillment and delivery.
<P>
</UL>

<A NAME="998598"></A>
<P CLASS="BP">
These developments drive the need for e-business integration:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998217"></A><A HREF="adois01.htm#998700">"Mergers and Acquisitions"</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998218"></A><A HREF="adois01.htm#998223">"Packaged Applications"</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998219"></A><A HREF="adois01.htm#998225">Business Process Re-engineering</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998696"></A><A HREF="adois01.htm#998233">Virtual, Dynamic Supply Chains</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998697"></A><A HREF="adois01.htm#998236">Customer Relationship Management</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998698"></A><A HREF="adois01.htm#998243">Corporate Self-Service</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998699"></A><A HREF="adois01.htm#998246">Business-to-Business Commerce</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998717"></A><A HREF="adois01.htm#998253">Application Service Providers and Hosting</A>
<P>
</UL>

<A NAME="998700"></A>
<!--TOC=h2-"998700"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Mergers and Acquisitions </FONT></H3>
<!--/TOC=h2-->

<A NAME="998221"></A>
<P CLASS="BP">
When two or more companies merge, or when one company acquires another, they must automate a company-wide business process for the new entity. To do so, they connect their information systems together to synchronize and share information. 
</P>

<A NAME="998222"></A>
<P CLASS="BP">
For instance, as telecommunications companies increasingly consolidate globally through mergers and acquisitions, they require a common view of their consolidated customer base. As a result, they must share and synchronize customer information among their front-end databases, their billing systems, and other front-end applications.
</P>

<A NAME="998223"></A>
<!--TOC=h2-"998223"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Packaged Applications </FONT></H3>
<!--/TOC=h2-->

<A NAME="998224"></A>
<P CLASS="BP">
As businesses buy packaged applications to streamline parts of their business, they must integrate these applications with other packaged applications and with legacy systems within the enterprise. Enterprise integration technologies enable applications to communicate with each other in order to automate business processes.
</P>

<A NAME="998225"></A>
<!--TOC=h2-"998225"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Business Process Re-engineering </FONT></H3>
<!--/TOC=h2-->

<A NAME="998226"></A>
<P CLASS="BP">
Business process reengineering drives the requirement for enterprise integration. As organizations redesign and streamline their business processes, the underlying applications infrastructure that facilitates these business processes must communicate with different systems in new ways. Companies undergoing business process reengineering deploy integration middleware to connect different systems together.
</P>

<A NAME="998227"></A>
<P CLASS="BP">
Although these three developments provide the primary incentives for enterprise integration within companies, companies undergoing a transition to e-business face additional integration needs. With e-business, customers and suppliers have transparent and direct access to the internal business processes of an organization. As a result, the e-business itself creates a demand for enterprise integration within companies and between businesses. These factors include:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998228"></A>Virtual, Dynamic Supply Chains
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998229"></A>Customer Relationship Management
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998230"></A>Corporate Self-Service
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998231"></A>Business-to-Business Commerce
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998232"></A>Application Service Providers and Hosting
<P>
</UL>

<A NAME="998233"></A>
<!--TOC=h2-"998233"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Virtual, Dynamic Supply Chains </FONT></H3>
<!--/TOC=h2-->

<A NAME="998234"></A>
<P CLASS="BP">
Many e-businesses outsource critical parts of their supply chain execution process to partners. These include manufacturing specialists who build specialized components, fulfillment specialists who provide logistics and fulfillment, and warehouse management specialists who manage a supplier's inventory in the warehouse. 
</P>

<A NAME="998235"></A>
<P CLASS="BP">
For instance, many personal computer manufacturers assemble the computers themselves but outsource the manufacturing of the PC boards and use a third-party logistics provider to ship the PCs directly to consumers. In such a case, the company's supply chain applications and business processes must be tightly linked with the supply chain systems of the suppliers. This ensures global visibility of inventory levels and demand patterns to all participants. Business-to-business integration software links these systems together.
</P>

<A NAME="998236"></A>
<!--TOC=h2-"998236"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Customer Relationship Management </FONT></H3>
<!--/TOC=h2-->

<A NAME="998237"></A>
<P CLASS="BP">
In an e-business, customers reach the company through a variety of facilities. They can:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998238"></A>Access a company's product information through its Web site
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998239"></A>Order products through the company's Web store
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998240"></A>Call a company's customer service operation to check the status of an order
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998241"></A>Follow up with a company's partners in order to get the product serviced
<P>
</UL>

<A NAME="998242"></A>
<P CLASS="BP">
All front-end applications of the business must be integrated so that customers have a unified view of the company no matter what channel they use to reach it. Ideally all front-end applications are designed to be integrated. In cases where applications are not integrated with each other, the business must use integration middleware to stitch the systems together.
</P>

<A NAME="998243"></A>
<!--TOC=h2-"998243"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Corporate Self-Service</FONT></H3>
<!--/TOC=h2-->

<A NAME="998244"></A>
<P CLASS="BP">
As companies move toward e-business, they convert customer-, supplier-, and employee-facing business processes to self-service. Customers enter their own orders for products by going to a company's Web store; suppliers enter their own purchase orders and complete the requisitioning process through their own secure Web sites; employees file their own expense reports, create their own purchase orders, purchase office supplies, and buy all of their own travel tickets online. 
</P>

<A NAME="998245"></A>
<P CLASS="BP">
To facilitate self-service, business processes must be streamlined to conduct Straight Through Processing. For instance, when an employee files an expense report, a workflow process notifies the employee's manager and debits the appropriate dollar amount from the company's financial systems, while crediting the employee in the company's payroll systems. E-Business integration middleware integrates all these discrete systems together to facilitate the business process. 
</P>

<A NAME="998246"></A>
<!--TOC=h2-"998246"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Business-to-Business Commerce </FONT></H3>
<!--/TOC=h2-->

<A NAME="998247"></A>
<P CLASS="BP">
As companies increasingly conduct business-to-business commerce through online marketplaces or exchanges, suppliers and customers who connect with these exchanges must automate their interactions in order to:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998248"></A>Reconcile their product catalogs and prices with the exchanges
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998249"></A>Respond to requests and bids from customers
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998250"></A>Participate in auctions and reverse auctions
<P>
</UL>

<A NAME="998251"></A>
<P CLASS="BP">
Suppliers and customers are beginning to use e-business integration middleware to tie their enterprise resource planning applications with online marketplaces to streamline business-to-business processes. 
</P>

<A NAME="998252"></A>
<P CLASS="BP">
Oracle Corporation, for instance, offers a version of its own e-business integration middleware that links suppliers to the exchanges the company is building. This is known as the Oracle Integration Server.
</P>

<A NAME="998253"></A>
<!--TOC=h2-"998253"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> 	Application Service Providers and Hosting </FONT></H3>
<!--/TOC=h2-->

<A NAME="998254"></A>
<P CLASS="BP">
Companies increasingly focus on their core competencies and outsource their enterprise applications to application service providers (ASPs) or to hosting companies. This creates a fundamental need to connect their own legacy information systems with those of the ASP and to connect the applications of one ASP to those of another. As a result, migrating a company's back-office systems from a corporate data center to that of an ASP creates demand for e-business integration middleware to tie these different systems together.
</P>

<A NAME="998255"></A>
<!--TOC=h1-"998255"-->
<H2 CLASS="H1"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Reasons for E-Business Integration</FONT></H2>


<!--/TOC=h1-->

<A NAME="998256"></A>
<P CLASS="BP">
The business drivers of e-business integration translate into specific requirements within an integration infrastructure. To understand what kinds of integration middleware are required, we identify three fundamental reasons for e-business integration:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998257"></A><A HREF="adois01.htm#998260">Synchronizing Data Between Information Systems</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998258"></A><A HREF="adois01.htm#998271">Isolating Applications and Businesses</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998259"></A><A HREF="adois01.htm#998280">Streamlining Multistep Business Processes</A>
<P>
</UL>

<A NAME="998260"></A>
<!--TOC=h2-"998260"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Synchronizing Data Between Information Systems</FONT></H3>
<!--/TOC=h2-->

<A NAME="998261"></A>
<P CLASS="BP">
The first reason is the need to synchronize data between information systems. e-businesses require a consistent, global, enterprise-level view of their business objects or information. For instance, they require:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998262"></A>A single, integrated view of each customer across various lines of business
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998263"></A>A consistent view of their supply chain inventory and of demand patterns with their suppliers and partners
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998264"></A>A consistent view of their finances across all of their disparate financial tracking systems
<P>
</UL>

<A NAME="998265"></A>
<P CLASS="BP">
The fundamental integration need in all of these cases is for a consistent global view of information across the different systems that synchronizes data between the different information systems. 
</P>

<A NAME="998266"></A>
<P CLASS="BP">
Synchronizing data between systems can be done either periodically by batch transfer or continually by repeated transactions. 
</P>

<A NAME="998267"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Batch-Style Data Synchronization </FONT></H4>

<A NAME="998268"></A>
<P CLASS="BP">
For instance, synchronizing data between an online transaction processing system and a data warehouse is typically done by synchronization batch transfer. A batch job extracts new information from the transactional system, transforms it into the appropriate format, and loads or populates the data warehouse. 
</P>

<A NAME="998269"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Transactional Data Synchronization </FONT></H4>

<A NAME="998270"></A>
<P CLASS="BP">
Other scenarios, however, require transactional data synchronization. For instance, when a banking customer makes an account transfer on a self-service Web site, the site must immediately reflect changes to his account. Account information stored in the bank's back-office systems must be synchronized through a transaction with the database backing the Web site. In some cases, the bank does not maintain two copies of a customer's account information: one in the database backing the Web site and another in the bank's back-office systems. Instead, the bank simply maintains customer information in one system and provides multiple applications with access to that system. This method has benefits and trade-offs associated with performance, scalability, and security that we discuss in the next section.
</P>

<A NAME="998271"></A>
<!--TOC=h2-"998271"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Isolating Applications and Businesses</FONT></H3>
<!--/TOC=h2-->

<A NAME="998272"></A>
<P CLASS="BP">
A second reason for intraenterprise or business-to-business integration is to separate one company's business processes and applications from those of its trading partners.
</P>

<A NAME="998273"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Isolating Applications from Each Other </FONT></H4>

<A NAME="998274"></A>
<P CLASS="BP">
The growing complexity of software and the associated difficulty in upgrading to new software versions makes it necessary to isolate applications. As software grows more complicated, developers increasingly break big problems into multiple smaller problems that can be solved separately. 
</P>

<A NAME="998275"></A>
<P CLASS="BP">
Developers create modules with well-defined interfaces between them that they combine together to develop the complete application. They focus on solving small problems within each module. By limiting communication between application modules through well-defined, standardized interfaces and by not sharing data between modules, developers can modify or upgrade one application module without affecting the other application modules. Program-to-program communication simplifies the application replacement process and minimizes the impact of a decision to change an application, relocate a data center, or even outsource the application completely.
</P>

<A NAME="998276"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Isolating Businesses from Each Other</FONT></H4>

<A NAME="998277"></A>
<P CLASS="BP">
Software complexity also affects the way one business communicates with another for business-to-business commerce. Each company looks to its trading partner as a provider of a service with well-defined standard interfaces. Developers standardize program-to-program communication by using application component models that define standardized interfaces for each module and a standardized protocol to communicate between modules. 
</P>

<A NAME="998278"></A>
<P CLASS="BP">
In the same way, communication between companies is now being standardized with the definition of standard interfaces through which they communicate (captured as XML-based business object documents) and standard network protocols such as RosettaNet and OAGIS. Isolating one company's internal business processes from those of another enables each company to modify its internal processes without affecting its trading partners. 
</P>

<A NAME="998279"></A>
<P CLASS="BP">
For instance, a company can change its own internal purchase order approval process. Because suppliers send the company purchase orders in a standard format over a standard Internet protocol, they are isolated from the company's purchase order approval process. This separation is a fundamental requirement for business-to-business commerce.
</P>

<A NAME="998280"></A>
<!--TOC=h2-"998280"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Streamlining Multistep Business Processes</FONT></H3>
<!--/TOC=h2-->

<A NAME="998281"></A>
<P CLASS="BP">
Business process automation, frequently called in the industry straight through processing, defines the process through which a multistep business process is streamlined. Automation eliminates human intervention by enabling one application to communicate directly with another. 
</P>

<A NAME="998282"></A>
<P CLASS="BP">
For instance, most small electronic storefronts and companies conducting commerce online transfer new orders accepted by their front-end Web store database to their back-office financial and supply-chain systems by using a manual process such as file transfer protocol (FTP). Such manual intervention causes three problems: it introduces the possibility of human error, it reduces the speed and efficiency of order processing, and it raises the total cost of operating the storefront as the volume of orders grows. 
</P>

<A NAME="998283"></A>
<P CLASS="BP">
Larger Web sites use a number of enterprise integration technologies to automate and streamline this multistep business process. These enable the storefront database to automatically propagate the order first to the financial system where the customer's credit history is validated and then to the supply-chain system to start the manufacturing and delivery process. Business process automation helps companies reduce costs, improve customer satisfaction, speed up business processes, and respond more rapidly to competition. 
</P>

<A NAME="998284"></A>
<P CLASS="BP">
From an integration point of view, multistep business processes can be streamlined in two ways:
</P>

<A NAME="998285"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Synchronous Communication: Request and Reply </FONT></H4>

<A NAME="998286"></A>
<P CLASS="BP">
Certain applications that form part of a multistep business process can be linked together using a request and reply structure. For instance, a company that has set up a Web storefront can check a customer's credit rating and purchase history with the company before permitting the customer to proceed to checkout. In this case, the two steps of the business process, the Web storefront event and the credit rating application, are linked in a request and reply structure; the storefront sends a request to the credit rating application and requires a reply before it can proceed. These two steps in the business process are logically part of a larger composite application and must communicate with each other synchronously. 
</P>

<A NAME="998287"></A>
<P CLASS="BP">
Interactive composite applications represent the most closely knit integration process. They always work in real time. Composite applications are rapidly growing in popularity as enterprises seek to provide more front-end marketing and service. A composite application generally appears to the end user to be a single Web application, but, behind the scenes, it invokes one or more mainframe transactions or calls to packaged applications or to NT applications.
</P>

<A NAME="998288"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Asynchronous Communication </FONT></H4>

<A NAME="998289"></A>
<P CLASS="BP">
Most applications that form part of a multistep business process are not linked in such a request and reply structure and can, instead, be linked together asynchronously. 
</P>

<A NAME="998290"></A>
<P CLASS="BP">
A multistep process is the most common form of integration because it addresses so many business needs. In a multistep process, the applications are logically independent because each step results from the work of another system earlier in the process. For example, when an order is accepted at the Web store, it is sent to the financial application where it can be tracked and to the supply-chain application where it starts the supply chain planning process. The Web store needs to know only that the message has been delivered to the back-office applications to guarantee once-only delivery of the purchase in the order received in the purchase queue.
</P>

<A NAME="998291"></A>
<P CLASS="BP">
The communication between the different applications that makes up the different steps of the business process is performed asynchronously by using messaging middleware. Asynchronous communication has a number of benefits: it couples the two applications together, it isolates the applications from a network or system failure, and it isolates each application from a software failure in the other.
</P>

<A NAME="998292"></A>
<P CLASS="BP">
Asynchronous communication is increasingly used to streamline business processes within a company. Though useful internally, it is fundamental to linking together business processes between companies for business-to-business commerce.
</P>

<A NAME="998293"></A>
<P CLASS="BP">
To summarize: Enterprise application portfolios are becoming an expanding patchwork of independently designed systems. It is impractical to implement all enterprise-wide business functions using a monolithically designed set of systems. User requirements are inherently too complex and dynamic for any one design team to provide the entire solution. A typical enterprise must deal with applications written in-house many years ago, multiple newer independent software vendor's application packages, end-user client/server applications, and a growing number of Internet and intranet applications. However, unintegrated applications are no longer acceptable: business managers demand an increasing level of integration between their systems. The task of integrating these heterogeneous systems is a central function of the IT organization today. As a result, enterprises must employ a blend of data consistency, application isolation, and multistep business process automation techniques to address their integration needs.
</P>

<A NAME="998294"></A>
<!--TOC=h1-"998294"-->
<H2 CLASS="H1"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> E-Business Integration Technologies and Approaches</FONT></H2>


<!--/TOC=h1-->

<A NAME="998295"></A>
<P CLASS="BP">
In this section, we examine the various technological alternatives available for integration and the integration approaches that these alternatives enable. We have shown that e-business integration consists of three basic kinds of relationships: data consistency and synchronization, application isolation, and multistep business process automation. Now we consider the three primary technological alternatives for e-business integration:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998296"></A>	Data consistency and synchronization technologies that use data replication and database gateways
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998297"></A>	Component-oriented development facilities, object request brokers, and synchronous integration methodologies
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998298"></A>	Message-oriented middleware and asynchronous integration facilities
<P>
</UL>

<A NAME="998299"></A>
<P CLASS="BP">
Each of these integration technologies is suited to a specific kind of integration problem. No single integration methodology is suited to all integration problems. 
</P>

<A NAME="998300"></A>
<P CLASS="BP">
We first examine the three different kinds of integration technologies and then discuss how each is suited to solving a specific integration problem. This section includes:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998722"></A><A HREF="adois01.htm#998301">Data Consistency and Synchronization Technologies</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998727"></A><A HREF="adois01.htm#998315">Component-Oriented Development Technologies</A>
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998732"></A><A HREF="adois01.htm#998327">Message-Oriented Middleware Technologies</A>
<P>
</UL>

<A NAME="998301"></A>
<!--TOC=h2-"998301"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Data Consistency and Synchronization Technologies</FONT></H3>
<!--/TOC=h2-->

<A NAME="998302"></A>
<P CLASS="BP">
Data consistency patterns aim to obtain facts from redundant data that is stored in multiple systems. A number of different mechanisms are used to synchronize data between systems, but they can be broadly classified into two categories:
</P>

<A NAME="998303"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif"><EM CLASS="Italic">	</EM>Data Movement Technologies </FONT></H4>

<A NAME="998304"></A>
<P CLASS="BP">
One way to synchronize data between different systems is to move data between the systems themselves. In fact, batch data transfer is the default approach to synchronizing data. Traditionally, many companies also use manual processes such as FTP to move data between systems. Database replication technology also synchronizes data stored in databases. Manual processes effectively synchronize data in a batch transfer or in pre-scheduled transactions.
</P>

<A NAME="998305"></A>
<P CLASS="BP">
However, as e-business drives the necessity to keep information consistent between systems, frequent real-time intervention is required. As a result, e-business requires that data movement use automated technologies such as database replication. Rather than relying on infrequent data batch runs, you must synchronize data using near-real-time transfer of individual updates as soon as you recognize them. 
</P>

<A NAME="998306"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Heterogeneous Data Access Technologies </FONT></H4>

<A NAME="998307"></A>
<P CLASS="BP">
An alternative to moving data between systems is to keep data in one place and access it from multiple heterogeneous applications. This eliminates the necessity to constantly synchronize data by moving it between systems, something that is further complicated as systems multiply. To simplify, all data that must be accessed by different systems are stored in one central place to which all applications requiring subsets of the data have access.
</P>

<A NAME="998308"></A>
<P CLASS="BP">
Although this method eliminates the need for continual data movement, you must consider three fundamental concerns to determine whether you can solve the data synchronization problem by using a single database:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998309"></A>The overall performance and scalability requirements for data access: how many different applications need to access the data and how frequently
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998310"></A>Whether the deployment of the applications is centralized or decentralized 
<P>

<A NAME="998311"></A>
<P CLASS="BP1">
For example, if applications are distributed across a low bandwidth wide area network (WAN), data does not move smoothly or efficiently across a WAN. Thus, in this case, you might have to move data between the systems by batch or manual transfer. Heterogeneous data-access technologies are primarily gateways to enable access to heterogeneous data stores such as mainframe databases, hierarchical data stores, flat file stores, and others.
</P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998312"></A>Whether the transactions performed involve multistep business processes 
<P>

<A NAME="998313"></A>
<P CLASS="BP1">
For example, an order may create a series of logically related transactions over a period of many days involving order entry, sales management, manufacturing, and supply chain planning and execution systems. In some cases, batch data transfer technologies are used to automate multistep business processes.
</P>
</UL>

<A NAME="998314"></A>
<P CLASS="BP">
 For critical business processes, workflow is automated through workload management tools such as workflow systems. Less critical and less well managed critical processes are often controlled through batch data transfer involving human intervention. As the need for faster end-to-end processing grows, batch transfers can become a bottleneck. Strategies such as end-to-end business process automation usually require messaging facilities to send individual events immediately to other systems. Data movement and data access technologies are best suited to synchronize information between different systems to provide a consistent global view of the information. 
</P>

<A NAME="998315"></A>
<!--TOC=h2-"998315"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Component-Oriented Development Technologies</FONT></H3>
<!--/TOC=h2-->

<A NAME="998316"></A>
<P CLASS="BP">
In order to isolate applications from each other, limited communication between applications occurs through a small set of well-defined interfaces that remain stable even as the applications change. In the modular development paradigm, components interact through program-to-program communication using well-defined standardized interfaces. Applications do not share data. By isolating program-to-program interaction to a small set of public interfaces, components are able to encapsulate business logic. An important added benefit of modularity is the ability to reuse components: if components are designed correctly, applications can be built by assembling these components in a plug and play fashion. 
</P>

<A NAME="998317"></A>
<P CLASS="BP">
Three primary component models are used in the industry today:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998318"></A>The most widely accepted is the Java2 Enterprise Edition (J2EE) or Enterprise JavaBeans (EJB) component model supported by major software vendors including Sun, Oracle, and IBM.
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998319"></A>The Common Object Request Broker Architecture (CORBA) standards committee within the Object Management Group (OMG) is also putting forward a CORBA component model.
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998320"></A>Microsoft has its own COM+ object model. 
<P>
</UL>

<A NAME="998321"></A>
<P CLASS="BP">
As applications are increasingly developed using component-based techniques, a fundamental integration issue is the manner in which components communicate with each other. They can do so in two ways:
</P>

<A NAME="998322"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Synchronous Communication </FONT></H4>

<A NAME="998323"></A>
<P CLASS="BP">
Each of the three common component models provides its own hosting environment for application components (called a container), which provides a set of services that enable components to operate. These include transaction services, naming and directory services, and brokering and trading services. For EJBs, these services are provided by a container called an Enterprise JavaBean Transaction Server; for CORBA, it is called an Object Request Broker or ORB; and for COM+, these services are provided by the Windows NT operating system itself. 
</P>

<A NAME="998324"></A>
<P CLASS="BP">
These containers manage communications between components using a synchronous remote procedure call (RPC) mechanism. Synchronous communication is ideal when applications need to be isolated but are related to each other in a request and response structure. Component middleware such as an ORB is well-suited for such types of integration because it documents program-to-program interface definitions and manages the communications.
</P>

<A NAME="998325"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	Asynchronous, Message-Oriented Middleware </FONT></H4>

<A NAME="998326"></A>
<P CLASS="BP">
It is technically possible, although rare, to implement a one-way asynchronous event notification between heterogeneous applications using traditional ORB calls. The center of a standard ORB is designed for two-way, request-reply interactions; it lacks the sophisticated messaging facilities required to loosely couple applications, particularly those that facilitate a multistep business process. Message-oriented middleware solutions, particularly the new generation of integration brokers, are much better suited to carry out such integrations.
</P>

<A NAME="998327"></A>
<!--TOC=h2-"998327"-->
<H3 CLASS="H2"><FONT FACE="Arial, Helvetica, sans-serif" COLOR="#330099"> Message-Oriented Middleware Technologies</FONT></H3>
<!--/TOC=h2-->

<A NAME="998328"></A>
<P CLASS="BP">
As automation of business processes within companies and business-to-business commerce increases, a new generation of middleware technology is emerging. It is based on asynchronous communication that loosely couples these applications and businesses together. The fundamental principle of messaging is to isolate information providers from information consumers so that an application can be added, dropped, or changed without affecting any other system. 
</P>

<A NAME="998329"></A>
<P CLASS="BP">
Message-oriented middleware enables applications and business processes to communicate by sending a message from one application to the other. Since the applications are mission-critical, the middleware provides features such as guaranteed once-only delivery of the message, store queuing, and forward queuing. Additionally, these messaging platforms add sophisticated message routing and distribution facilities. These include:
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998330"></A>Content-based routing in which the message is sent to a different location based on its content
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998331"></A>Topic-based or subject-based routing in which the message is sent to a different location based on its subject
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998332"></A>Publish-subscribe routing in which a sender simply publishes a message to a queue to which subscribers who are interested in the message subscribe. The publisher does not know who will receive the message. 
<P>
</UL>

<A NAME="998333"></A>
<P CLASS="BP">
Most component models such as Enterprise JavaBeans are now adding asynchronous communication interfaces to enable them to communicate with each other in a loosely coupled fashion. You can use basic message-oriented middleware both within a distributed application and to integrate one application to another because it is inherently connectionless. Asynchronous messaging facilities are best suited to applications that must be loosely coupled together such as when they form part of a multistep business process (and are not related in a request-response fashion). 
</P>

<A NAME="998334"></A>
<P CLASS="BP">
Messaging middleware connects dissimilar applications in a fundamentally different way than do direct server-to-application gateways. Direct gateways are best at tactical, request-reply interactions especially when extending one or two back-end applications with a Web front end. 
</P>

<A NAME="998335"></A>
<P CLASS="BP">
Message-based solutions are best suited for asynchronous applications that require either data consistency or multistep process applications and for systematic composite applications that have multiple heterogeneous participants. Messaging introduces an incremental layer of communication semantics and administration. This complexity is not necessary for some projects. However, messaging provides a rich, comprehensive infrastructure that handles consistency and multistep and composite patterns in one solution. Components dominate intra-application architecture and often are used to connect into message-based integration infrastructures. 
</P>

<A NAME="998336"></A>
<P CLASS="BP">
Ultimately, message-centric integration connects all applications to each other through a general purpose enterprise hub. All applications publish information to this integration hub without needing to know where to send it, who will receive it, or what format the receiver prefers. The whole application portfolio remains flexible because connection logic and delivery instructions reside in the infrastructure rather than in the applications themselves.
</P>

<A NAME="998337"></A>
<P CLASS="BP">
Messaging enables a program to act as a producer by placing a message in a queue and then proceeding with its work. The queuing system reliably delivers the message to the appropriate recipient. The recipient, acting as a consumer, retrieves requests from the queue and acts on them. By isolating requests for service from the supply of services, messaging increases efficiency and provides the infrastructure to schedule complex tasks. With messaging, programs do not communicate with each other directly. They are disconnected from each other and communicate through the messaging system that serves as a communication hub among different application programs. Messaging, therefore, provides a useful paradigm for getting many programs to communicate with each other. 
</P>

<A NAME="998639"></A>
<P CLASS="BP">
Three specific application design issues frequently motivate the use of a messaging service for interapplication communication. 
</P>

<A NAME="998338"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">	No Request-Response Requirements </FONT></H4>

<A NAME="998339"></A>
<P CLASS="BP">
Messaging is ideally suited for applications in which a program can proceed with its own work after sending a message to another program: the first program does not need to wait for a response from the second program to proceed. It is also suited for applications that can continue their work until a message must be retrieved. 
</P>

<A NAME="998340"></A>
<P CLASS="BP">
If the first program requires a response to proceed, messaging is an inappropriate communication mechanism. A synchronous communication mechanism such as Net8 or CORBA RPC is preferable. In a synchronous mechanism, the first program sends a request to the second and then waits until the second sends a reply. The first uses this response to carry out further processing. 
</P>

<A NAME="998341"></A>
<P CLASS="BP">
Messaging, in contrast, is suited to applications that do not require such a relationship; the first simply places a message on a queue and continues with its work without waiting for a response from the second. 
</P>

<A NAME="998342"></A>
<P CLASS="BP">
Note that you can use these two models, synchronous communication and messaging, together in the same application. For instance in a shipping application, the order entry program communicates with another customer management program to check the validity of a customer before accepting his or her order. This requires synchronous communication, since the order entry program requires the reply from the customer management program before continuing to process the order.
</P>

<A NAME="998343"></A>
<P CLASS="BP">
However, when the order is complete, the order entry application notifies the shipping program that an order must be sent to the customer. This communication is best done using messaging since the order entry application does not need to wait for the response from the shipping program to further process the order. 
</P>

<A NAME="998344"></A>
<H4 CLASS="SH1"><FONT FACE="Arial, Helvetica, sans-serif">Isolated Processing </FONT></H4>

<A NAME="998345"></A>
<P CLASS="BP">
The second factor that could influence you to use a messaging system for inter-program communication is the deployment architecture of the application. For synchronous communication to work, all programs must be running and available at the same time. The network that connects the programs must be available, the systems that run the programs must be up, and all the programs must be available simultaneously. If any nodes of the deployment environment are unreliable, then messaging provides a more robust solution. Messaging removes the time-dependent relationship between programs. As a result, applications are less vulnerable to program failure. For deferred execution to work correctly in the event of network, system, and application failures, messages that constitute requests for service must be stored persistently and processed exactly once. Being able to preserve messages is fundamental in an enterprise messaging infrastructure for four reasons: 
</P>

<UL CLASS="LB1">

<LI CLASS="LB1" TYPE="DISC"><A NAME="998346"></A><EM CLASS="Italic">		</EM><STRONG CLASS="Bold">Inability to process messages as they arrive: </STRONG>Applications must deal with many unprocessed messages arriving simultaneously from clients. They might not have the resources to process all the requests immediately. A messaging system must be able to store the message in a persistent queue and deliver it later when the recipient can process it. 
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998347"></A><EM CLASS="Italic">		</EM><STRONG CLASS="Bold">Message scheduling: </STRONG>Messaging systems also require message persistence so that they can deal with priorities: messages arriving later may be of higher priority than messages arriving earlier; messages arriving earlier may have to wait for messages arriving later before actions can be executed. Such message priorities may also change over time; messages in a particular queue can become more important than messages in other queues during certain time windows, for instance. Message persistence enables messages in high priority queues to be processed first, while low priority messages can be stored and processed later without interfering with high priority messages. 
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998348"></A><EM CLASS="Italic">		</EM><STRONG CLASS="Bold">Message auditing: </STRONG>Message persistence is also critical because the control component of the message can be as important as the payload information itself. For instance, the time that a message is received and dispatched can be a critical part of a message. In an e-commerce environment, message persistence stores information on orders from various customers and can be queried to identify periods of peak demand or to determine the status of an order. The message, therefore, can remain important even after it has been executed. A persistent messaging store is critical to ensure that information can be warehoused and queried or audited.
<P>

<LI CLASS="LB1" TYPE="DISC"><A NAME="998349"></A><STRONG CLASS="Bold">		Failures: </STRONG>The communication links between messaging clients might not be available all the time or might be reserved for some other purpose. If the system cannot process messages immediately because of either a lack of processing resources or a failure, the messaging system must be able to store the message persistently and deliver it when the resource is available. Such guaranteed message delivery of each message to each recipient exactly once is critical when integrating enterprise applications. 
<P>
</UL>






<!-- Start Footer -->
</DIV>

<DIV CLASS="OUTD">
<HR>
<TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>
<TD VALIGN="BOTTOM" WIDTH="33%">
<TABLE CELLSPACING="0" CELLPADDING="0">
<TR>
<TD ALIGN="CENTER"><A HREF="part1.htm"><IMG SRC="../../dcommon/gifs/larrow.gif" ALT="Go to previous page" BORDER="0" HEIGHT="30" WIDTH="40"></A></TD>

<TD ALIGN="CENTER"><A HREF="adois02.htm"><IMG SRC="../../dcommon/gifs/rarrow.gif" ALT="Go to next page" BORDER="0" HEIGHT="30" WIDTH="40"></A></TD>
    
</TR>
</TABLE>
</TD>
<TD ALIGN="CENTER" WIDTH="34%">
<A HREF="../../dcommon/html/cpyr.htm"><IMG SRC="../../dcommon/gifs/oracle.gif" ALT="Oracle" BORDER="0"><BR>
<FONT SIZE="-2">Copyright &copy; 1996-2000, Oracle Corporation.</FONT></A>
<BR>
<FONT SIZE="-2">All Rights Reserved.</FONT>
</TD>
<TD VALIGN="BOTTOM" ALIGN="RIGHT" WIDTH="33%"> 
<TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="144">
<TR>




<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="../../products.htm"><IMG SRC="../../dcommon/gifs/prodicon.gif" ALT="" BORDER="0" HEIGHT="30" WIDTH="30"><BR>
<FONT SIZE="-2">Library</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="../index.htm"><IMG SRC="../../dcommon/gifs/bookicon.gif" ALT="" BORDER="0" HEIGHT="30" WIDTH="30"><BR>
<FONT SIZE="-2">Product</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="toc.htm"><IMG SRC="../../dcommon/gifs/conticon.gif" ALT="" BORDER="0" HEIGHT="30"
WIDTH="30"><BR>
<FONT SIZE="-2">Contents</FONT></A></TD>
<TD ALIGN="CENTER" VALIGN="TOP" WIDTH="25%"><A HREF="index.htm"><IMG SRC="../../dcommon/gifs/indxicon.gif" ALT="" BORDER="0" HEIGHT="30"
WIDTH="30"><BR>
<FONT SIZE="-2">Index</FONT></A></TD>

</TR>
</TABLE>
</TD>
</TR>
</TABLE>
  
</DIV>

</BODY>
</HTML>

